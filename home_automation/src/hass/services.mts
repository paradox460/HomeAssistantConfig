// This file is generated by type-writer
// Changes will not be preserved if you run the command again
import "@digital-alchemy/hass";

import {
  AndroidNotificationData,
  AppleNotificationData,
  NotificationData,
  PICK_ENTITY,
  PICK_FROM_PLATFORM,
  TAreaId,
  TDeviceId,
  TLabelId,
  WeatherGetForecasts,
} from "@digital-alchemy/hass";
import { EmptyObject, LiteralUnion, RequireAtLeastOne } from "type-fest";

declare module "@digital-alchemy/hass" {
  export interface iCallService {
    // # MARK: alert
    alert: {
      /**
       * ### Toggle
       *
       * > Toggles alert's notifications.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - alert
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Silences alert's notifications.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - alert
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Resets alert's notifications.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - alert
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: automation
    automation: {
      /**
       * ### Reload
       *
       * > Reloads the automation configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Toggles (enable / disable) an automation.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - automation
           * > ```
           */
          entity_id: PICK_ENTITY<"automation"> | PICK_ENTITY<"automation">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Trigger
       *
       * > Triggers the actions of an automation.
       */
      trigger: (
        service_data?: {
          /**
           * ## Skip conditions
           *
           * > Defines whether or not the conditions will be skipped.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          skip_condition?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - automation
           * > ```
           */
          entity_id: PICK_ENTITY<"automation"> | PICK_ENTITY<"automation">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Disables an automation.
       */
      turn_off: (
        service_data?: {
          /**
           * ## Stop actions
           *
           * > Stops currently running actions.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          stop_actions?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - automation
           * > ```
           */
          entity_id: PICK_ENTITY<"automation"> | PICK_ENTITY<"automation">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Enables an automation.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - automation
           * > ```
           */
          entity_id: PICK_ENTITY<"automation"> | PICK_ENTITY<"automation">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: backup
    backup: {
      /**
       * ### Create automatic backup
       *
       * > Creates a new backup with automatic backup settings.
       */
      create_automatic: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: bambu_lab
    bambu_lab: {
      /**
       * ### Extrude or retract filament
       *
       * > Perform an extrusion or extraction of the loaded filament
       */
      extrude_retract: <T = unknown>(
        service_data?: {
          /**
           * ## Force
           *
           * > Perform extrusion or retraction if nozzle temperature is below 170ÂºC.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "force": "false"
           * > }
           * > ```
           */
          force?: boolean;
          /**
           * ## Type
           *
           * > The type of extrude action to perform
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "type": "Extrude"
           * > }
           * > ```
           */
          type: "Extrude" | "Retract";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
      /**
       * ### Gets a json string with details about all known filaments
       *
       * > Gets a json string with details about all known filaments
       */
      get_filament_data: <T = unknown>(
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
      /**
       * ### Load filament
       *
       * > Load a new filament into the extruder passed an AMS tray or an External spool entity
       */
      load_filament: (
        service_data?: {
          /**
           * ## Temperature
           *
           * > Target nozzle temperature once the filament is loaded. By default uses the midpoint between min and max temperature of the chosen filament.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "temperature": "220"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 250
           * >   step: 1
           * > ```
           */
          temperature?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Move axis
       *
       * > Move the printhead or bed
       */
      move_axis: (
        service_data?: {
          /**
           * ## Axis
           *
           * > The axis to move. X1 and P1 devices, X and Y move the printhead, Z moves the bed. A1, Z moves the gantry, Y the bed, X the printhead.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "axis": "X"
           * > }
           * > ```
           */
          axis: "X" | "Y" | "Z" | "Home";
          /**
           * ## Distance
           *
           * > The distance (in mm) to move the axis A negative distance moves Z up, X left, Y forward.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "distance": "10"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: -100
           * >   max: 100
           * >   step: 1
           * > ```
           */
          distance?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Print 3MF project file
       *
       * > Print sliced 3MF file stored on the SD card
       */
      print_project_file: (
        service_data: {
          /**
           * ## AMS Slots Mapping
           *
           * > https://community.home-assistant.io/t/bambu-lab-x1-x1c-mqtt/489510/738
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "ams_mapping": "2,-1,0"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > "0"
           * > ```
           */
          ams_mapping: string;
          /**
           * ## Bed Leveling
           *
           * > Perform bed leveling before print
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          bed_leveling: boolean;
          /**
           * ## File path
           *
           * > Filename on SD card
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "filepath": "filename.3mf"
           * > }
           * > ```
           */
          filepath: string;
          /**
           * ## Flow Calibration
           *
           * > Perform flow calibration before print
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          flow_cali: boolean;
          /**
           * ## First Layer Inspection
           *
           * > Perform first layer inspection during print
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          layer_inspect: boolean;
          /**
           * ## Plate number
           *
           * > Plate number to print
           *
           * ### Default
           *
           * > ```json
           * > 1
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   mode: box
           * >   min: 1
           * >   max: 100
           * > ```
           */
          plate: number;
          /**
           * ## Timelapse
           *
           * > Record timelapse of the print
           *
           * ### Default
           *
           * > ```json
           * > false
           * > ```
           */
          timelapse: boolean;
          /**
           * ## Use AMS
           *
           * > Use AMS for print. Uses external spool otherwise
           *
           * ### Default
           *
           * > ```json
           * > false
           * > ```
           */
          use_ams: boolean;
          /**
           * ## Vibration Calibration
           *
           * > Perform vibration calibration (aka XY Mech Sweep) before print
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          vibration_cali: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Send Command
       *
       * > Send an arbitrary command to the 3D printer
       */
      send_command: (
        service_data: {
          /**
           * ## Command
           *
           * > The command to send to the printer
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "command": "M104 S200"
           * > }
           * > ```
           */
          command: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set filament
       *
       * > Sets filament details on an AMS tray or an External spool entity
       */
      set_filament: (
        service_data: {
          /**
           * ## Maximum recommended nozzle temperature
           *
           * > The maximum temperature that it is recommended to print this filament at.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "nozzle_temp_max": "220"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 160
           * >   max: 300
           * >   step: 1
           * > ```
           */
          nozzle_temp_max: number;
          /**
           * ## Minimum recommended nozzle temperature
           *
           * > The minimum temperature that it is recommended to print this filament at.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "nozzle_temp_min": "220"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 160
           * >   max: 300
           * >   step: 1
           * > ```
           */
          nozzle_temp_min: number;
          /**
           * ## Color
           *
           * > RGBA value for the color. E.g. FF0000FF is opaque red.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "tray_color": "FF0000FF"
           * > }
           * > ```
           */
          tray_color: string;
          /**
           * ## Filament ID
           *
           * > Bambu's filament ID. E.g. GFL96 is Generic PLA Silk
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "tray_info_idx": "GFL96"
           * > }
           * > ```
           */
          tray_info_idx: string;
          /**
           * ## Filament type
           *
           * > Type of filament. E.g. 'PLA' or 'PETG'
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "tray_type": "PLA"
           * > }
           * > ```
           */
          tray_type: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Skip objects
       *
       * > Skip objects currently being printed
       */
      skip_objects: (
        service_data: {
          /**
           * ## Object IDs
           *
           * > Object IDs are available from printable objects entity attributes
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "objects": "409,1463"
           * > }
           * > ```
           */
          objects: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Unload filament
       *
       * > Unload the filament currently loaded into the extruder
       */
      unload_filament: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: bambu_lab
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"bambu_lab"> | PICK_FROM_PLATFORM<"bambu_lab">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: button
    button: {
      /**
       * ### Press
       *
       * > Press the button entity.
       */
      press: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - button
           * > ```
           */
          entity_id: PICK_ENTITY<"button"> | PICK_ENTITY<"button">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: calendar
    calendar: {
      /**
       * ### Create event
       *
       * > Adds a new calendar event.
       */
      create_event: (
        service_data?: {
          /**
           * ## Description
           *
           * > A more complete description of the event than the one provided by the summary.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "description": "Meeting to provide technical review for 'Phoenix' design."
           * > }
           * > ```
           */
          description?: string;
          /**
           * ## End date
           *
           * > The date the all-day event should end (exclusive).
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "end_date": "2022-03-23"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > date: null
           * > ```
           */
          end_date?: unknown;
          /**
           * ## End time
           *
           * > The date and time the event should end.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "end_date_time": "2022-03-22 22:00:00"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > datetime: null
           * > ```
           */
          end_date_time?: unknown;
          /**
           * ## In
           *
           * > Days or weeks that you want to create the event in.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "in": "{\"days\": 2} or {\"weeks\": 2}"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * >
           * > ```
           */
          in?: unknown;
          /**
           * ## Location
           *
           * > The location of the event.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "location": "Conference Room - F123, Bldg. 002"
           * > }
           * > ```
           */
          location?: string;
          /**
           * ## Start date
           *
           * > The date the all-day event should start.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "start_date": "2022-03-22"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > date: null
           * > ```
           */
          start_date?: unknown;
          /**
           * ## Start time
           *
           * > The date and time the event should start.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "start_date_time": "2022-03-22 20:00:00"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > datetime: null
           * > ```
           */
          start_date_time?: unknown;
          /**
           * ## Summary
           *
           * > Defines the short summary or subject for the event.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "summary": "Department Party"
           * > }
           * > ```
           */
          summary: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - calendar
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: PICK_ENTITY<"calendar"> | PICK_ENTITY<"calendar">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Get events
       *
       * > Retrieves events on a calendar within a time range.
       */
      get_events: <T = unknown>(
        service_data?: {
          /**
           * ## Duration
           *
           * > Returns active events from Start time for the specified duration.
           *
           * ## Selector
           *
           * > ```yaml
           * > duration: null
           * > ```
           */
          duration?: unknown;
          /**
           * ## End time
           *
           * > Returns active events before this time (exclusive). Cannot be used with Duration.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "end_date_time": "2022-03-22 22:00:00"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > datetime: null
           * > ```
           */
          end_date_time?: unknown;
          /**
           * ## Start time
           *
           * > Returns active events after this time (exclusive). When not set, defaults to now.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "start_date_time": "2022-03-22 20:00:00"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > datetime: null
           * > ```
           */
          start_date_time?: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - calendar
           * > ```
           */
          entity_id: PICK_ENTITY<"calendar"> | PICK_ENTITY<"calendar">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
    };
    // # MARK: camera
    camera: {
      /**
       * ### Disable motion detection
       *
       * > Disables the motion detection.
       */
      disable_motion_detection: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - camera
           * > ```
           */
          entity_id: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Enable motion detection
       *
       * > Enables the motion detection.
       */
      enable_motion_detection: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - camera
           * > ```
           */
          entity_id: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Play stream
       *
       * > Plays the camera stream on a supported media player.
       */
      play_stream: (
        service_data?: {
          /**
           * ## Format
           *
           * > Stream format supported by the media player.
           *
           * ### Default
           *
           * > ```json
           * > "hls"
           * > ```
           */
          format?: "hls";
          /**
           * ## Media player
           *
           * > Media players to stream to.
           */
          media_player: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - camera
           * > ```
           */
          entity_id: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Record
       *
       * > Creates a recording of a live camera feed.
       */
      record: (
        service_data?: {
          /**
           * ## Duration
           *
           * > Planned duration of the recording. The actual duration may vary.
           *
           * ### Default
           *
           * > ```json
           * > 30
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 3600
           * >   unit_of_measurement: seconds
           * > ```
           */
          duration?: number;
          /**
           * ## Filename
           *
           * > Full path to filename. Must be mp4.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "filename": "/tmp/snapshot_{{ entity_id.name }}.mp4"
           * > }
           * > ```
           */
          filename: string;
          /**
           * ## Lookback
           *
           * > Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.
           *
           * ### Default
           *
           * > ```json
           * > 0
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 300
           * >   unit_of_measurement: seconds
           * > ```
           */
          lookback?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - camera
           * > ```
           */
          entity_id: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Take snapshot
       *
       * > Takes a snapshot from a camera.
       */
      snapshot: (
        service_data: {
          /**
           * ## Filename
           *
           * > Full path to filename.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "filename": "/tmp/snapshot_{{ entity_id.name }}.jpg"
           * > }
           * > ```
           */
          filename: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - camera
           * > ```
           */
          entity_id: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns off the camera.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - camera
           * > ```
           */
          entity_id: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns on the camera.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - camera
           * > ```
           */
          entity_id: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: cast
    cast: {
      /**
       * ### Show dashboard view
       *
       * > Shows a dashboard view on a Chromecast device.
       */
      show_lovelace_view: (service_data?: {
        /**
         * ## Dashboard path
         *
         * > The URL path of the dashboard to show, defaults to lovelace if not specified.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "dashboard_path": "lovelace-cast"
         * > }
         * > ```
         */
        dashboard_path?: string;
        /**
         * ## Entity
         *
         * > Media player entity to show the dashboard view on.
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: cast
         * >   domain: media_player
         * > ```
         */
        entity_id:
          | PICK_FROM_PLATFORM<"cast", "media_player">
          | PICK_FROM_PLATFORM<"cast", "media_player">[];
        /**
         * ## View path
         *
         * > The URL path of the dashboard view to show.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "view_path": "downstairs"
         * > }
         * > ```
         */
        view_path: string;
      }) => Promise<void>;
    };
    // # MARK: climate
    climate: {
      /**
       * ### Set fan mode
       *
       * > Sets fan operation mode.
       */
      set_fan_mode: (
        service_data: {
          /**
           * ## Fan mode
           *
           * > Fan operation mode.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "fan_mode": "low"
           * > }
           * > ```
           */
          fan_mode: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 8
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set target humidity
       *
       * > Sets target humidity.
       */
      set_humidity: (
        service_data: {
          /**
           * ## Humidity
           *
           * > Target humidity.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 30
           * >   max: 99
           * >   unit_of_measurement: '%'
           * > ```
           */
          humidity: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 4
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set HVAC mode
       *
       * > Sets HVAC operation mode.
       */
      set_hvac_mode: (
        service_data?: {
          /**
           * ## HVAC mode
           *
           * > HVAC operation mode.
           */
          hvac_mode?: "off" | "auto" | "cool" | "dry" | "fan_only" | "heat_cool" | "heat";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set preset mode
       *
       * > Sets preset mode.
       */
      set_preset_mode: (
        service_data: {
          /**
           * ## Preset mode
           *
           * > Preset mode.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "preset_mode": "away"
           * > }
           * > ```
           */
          preset_mode: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 16
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set horizontal swing mode
       *
       * > Sets horizontal swing operation mode.
       */
      set_swing_horizontal_mode: (
        service_data: {
          /**
           * ## Horizontal swing mode
           *
           * > Horizontal swing operation mode.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "swing_horizontal_mode": "on"
           * > }
           * > ```
           */
          swing_horizontal_mode: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 512
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set swing mode
       *
       * > Sets swing operation mode.
       */
      set_swing_mode: (
        service_data: {
          /**
           * ## Swing mode
           *
           * > Swing operation mode.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "swing_mode": "on"
           * > }
           * > ```
           */
          swing_mode: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 32
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set target temperature
       *
       * > Sets the temperature setpoint.
       */
      set_temperature: (
        service_data?: {
          /**
           * ## HVAC mode
           *
           * > HVAC operation mode.
           */
          hvac_mode?: "off" | "auto" | "cool" | "dry" | "fan_only" | "heat_cool" | "heat";
          /**
           * ## Upper target temperature
           *
           * > The max temperature setpoint.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 250
           * >   step: 0.1
           * >   mode: box
           * > ```
           */
          target_temp_high?: number;
          /**
           * ## Lower target temperature
           *
           * > The min temperature setpoint.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 250
           * >   step: 0.1
           * >   mode: box
           * > ```
           */
          target_temp_low?: number;
          /**
           * ## Target temperature
           *
           * > The temperature setpoint.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 250
           * >   step: 0.1
           * >   mode: box
           * > ```
           */
          temperature?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 1
           * >       - 2
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Toggles climate device, from on to off, or off to on.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 128
           * >       - 256
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns climate device off.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 128
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns climate device on.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - climate
           * >     supported_features:
           * >       - 256
           * > ```
           */
          entity_id: PICK_ENTITY<"climate"> | PICK_ENTITY<"climate">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: cloud
    cloud: {
      /**
       * ### Enable remote access
       *
       * > Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.
       */
      remote_connect: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Disable remote access
       *
       * > Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.
       */
      remote_disconnect: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: conversation
    conversation: {
      /**
       * ### Process
       *
       * > Launches a conversation from a transcribed text.
       */
      process: <T = unknown>(service_data?: {
        /**
         * ## Agent
         *
         * > Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "agent_id": "homeassistant"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > conversation_agent: null
         * > ```
         */
        agent_id?: unknown;
        /**
         * ## Conversation ID
         *
         * > ID of the conversation, to be able to continue a previous conversation
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "conversation_id": "my_conversation_1"
         * > }
         * > ```
         */
        conversation_id?: string;
        /**
         * ## Language
         *
         * > Language of text. Defaults to server language.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "language": "NL"
         * > }
         * > ```
         */
        language?: string;
        /**
         * ## Text
         *
         * > Transcribed text input.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "text": "Turn all lights on"
         * > }
         * > ```
         */
        text: string;
      }) => Promise<T>;
      /**
       * ### Reload
       *
       * > Reloads the intent configuration.
       */
      reload: (service_data?: {
        /**
         * ## Agent
         *
         * > Conversation agent to reload.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "agent_id": "homeassistant"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > conversation_agent: null
         * > ```
         */
        agent_id?: unknown;
        /**
         * ## Language
         *
         * > Language to clear cached intents for. Defaults to server language.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "language": "NL"
         * > }
         * > ```
         */
        language?: string;
      }) => Promise<void>;
    };
    // # MARK: counter
    counter: {
      /**
       * ### Decrement
       *
       * > Decrements a counter by its step size.
       */
      decrement: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - counter
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Increment
       *
       * > Increments a counter by its step size.
       */
      increment: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - counter
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reset
       *
       * > Resets a counter to its initial value.
       */
      reset: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - counter
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set
       *
       * > Sets the counter to a specific value.
       */
      set_value: (
        service_data: {
          /**
           * ## Value
           *
           * > The new counter value the entity should be set to.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 9223372036854776000
           * >   mode: box
           * > ```
           */
          value: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - counter
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: cover
    cover: {
      /**
       * ### Close
       *
       * > Closes a cover.
       */
      close_cover: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 2
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Close tilt
       *
       * > Tilts a cover to close.
       */
      close_cover_tilt: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 32
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Open
       *
       * > Opens a cover.
       */
      open_cover: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Open tilt
       *
       * > Tilts a cover open.
       */
      open_cover_tilt: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 16
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set position
       *
       * > Moves a cover to a specific position.
       */
      set_cover_position: (
        service_data: {
          /**
           * ## Position
           *
           * > Target position.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          position: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 4
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set tilt position
       *
       * > Moves a cover tilt to a specific position.
       */
      set_cover_tilt_position: (
        service_data: {
          /**
           * ## Tilt position
           *
           * > Target tilt positition.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          tilt_position: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 128
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Stop
       *
       * > Stops the cover movement.
       */
      stop_cover: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 8
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Stop tilt
       *
       * > Stops a tilting cover movement.
       */
      stop_cover_tilt: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 64
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Toggles a cover open/closed.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 3
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Toggle tilt
       *
       * > Toggles a cover tilt open/closed.
       */
      toggle_cover_tilt: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - cover
           * >     supported_features:
           * >       - 48
           * > ```
           */
          entity_id: PICK_ENTITY<"cover"> | PICK_ENTITY<"cover">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: date
    date: {
      /**
       * ### Set date
       *
       * > Sets the date.
       */
      set_value: (
        service_data: {
          /**
           * ## Date
           *
           * > The date to set.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "date": "2022/11/01"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > date: null
           * > ```
           */
          date: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - date
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: datetime
    datetime: {
      /**
       * ### Set date/time
       *
       * > Sets the date/time for a datetime entity.
       */
      set_value: (
        service_data: {
          /**
           * ## Date & Time
           *
           * > The date/time to set. The time zone of the Home Assistant instance is assumed.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "datetime": "2023-10-07T21:35:22"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > datetime: null
           * > ```
           */
          datetime: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - datetime
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: device_tracker
    device_tracker: {
      /**
       * ### See
       *
       * > Manually update the records of a seen legacy device tracker in the known_devices.yaml file.
       */
      see: (service_data?: {
        /**
         * ## Battery level
         *
         * > Battery level of the device.
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   max: 100
         * >   unit_of_measurement: '%'
         * > ```
         */
        battery?: number;
        /**
         * ## Device ID
         *
         * > ID of the device (find the ID in `known_devices.yaml`).
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "dev_id": "phonedave"
         * > }
         * > ```
         */
        dev_id?: string;
        /**
         * ## GPS coordinates
         *
         * > GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]).
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "gps": "[51.509802, -0.086692]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        gps?: unknown;
        /**
         * ## GPS accuracy
         *
         * > Accuracy of the GPS coordinates.
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   mode: box
         * >   unit_of_measurement: m
         * > ```
         */
        gps_accuracy?: number;
        /**
         * ## Hostname
         *
         * > Hostname of the device.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "host_name": "Dave"
         * > }
         * > ```
         */
        host_name?: string;
        /**
         * ## Location
         *
         * > Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "location_name": "home"
         * > }
         * > ```
         */
        location_name?: string;
        /**
         * ## MAC address
         *
         * > MAC address of the device.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "mac": "FF:FF:FF:FF:FF:FF"
         * > }
         * > ```
         */
        mac?: string;
      }) => Promise<void>;
    };
    // # MARK: dyson_local
    dyson_local: {
      /**
       * ### Set Angle
       *
       * > Set the oscillation angle of the selected fan(s).
       */
      set_angle: (service_data?: {
        /**
         * ## Angle High
         *
         * > The angle at which the oscillation should end
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "angle_high": "255"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        angle_high?: unknown;
        /**
         * ## Angle Low
         *
         * > The angle at which the oscillation should start
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "angle_low": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        angle_low?: unknown;
        /**
         * ## Entity ID
         *
         * > Name(s) of the entities for which to set the angle
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "fan.living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        entity_id?: unknown;
      }) => Promise<void>;
      /**
       * ### Set Timer
       *
       * > Sets, or clears, the timer of a fan (in minutes).
       */
      set_timer: (
        service_data: {
          /**
           * ## Minutes
           *
           * > How many minutes the timer should run for. Set to 0 to disable timer.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 540
           * >   step: 1
           * >   unit_of_measurement: minutes
           * > ```
           */
          timer: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: fan
    fan: {
      /**
       * ### Decrease speed
       *
       * > Decreases the speed of a fan.
       */
      decrease_speed: (
        service_data?: {
          /**
           * ## Decrement
           *
           * > Percentage step by which the speed should be decreased.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          percentage_step?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Increase speed
       *
       * > Increases the speed of a fan.
       */
      increase_speed: (
        service_data?: {
          /**
           * ## Increment
           *
           * > Percentage step by which the speed should be increased.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          percentage_step?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Oscillate
       *
       * > Controls the oscillation of a fan.
       */
      oscillate: (
        service_data: {
          /**
           * ## Oscillating
           *
           * > Turns oscillation on/off.
           */
          oscillating: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 2
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set direction
       *
       * > Sets a fan's rotation direction.
       */
      set_direction: (
        service_data: {
          /**
           * ## Direction
           *
           * > Direction of the fan rotation.
           */
          direction: "forward" | "reverse";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 4
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set speed
       *
       * > Sets the speed of a fan.
       */
      set_percentage: (
        service_data: {
          /**
           * ## Percentage
           *
           * > Speed of the fan.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          percentage: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set preset mode
       *
       * > Sets preset fan mode.
       */
      set_preset_mode: (
        service_data: {
          /**
           * ## Preset mode
           *
           * > Preset fan mode.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "preset_mode": "auto"
           * > }
           * > ```
           */
          preset_mode: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 8
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Toggles a fan on/off.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns fan off.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 16
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns fan on.
       */
      turn_on: (
        service_data?: {
          /**
           * ## Percentage
           *
           * > Speed of the fan.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          percentage?: number;
          /**
           * ## Preset mode
           *
           * > Preset fan mode.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "preset_mode": "auto"
           * > }
           * > ```
           */
          preset_mode?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - fan
           * >     supported_features:
           * >       - 32
           * > ```
           */
          entity_id: PICK_ENTITY<"fan"> | PICK_ENTITY<"fan">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: ffmpeg
    ffmpeg: {
      /**
       * ### Restart
       *
       * > Sends a restart command to an FFmpeg-based sensor.
       */
      restart: (service_data?: {
        /**
         * ## Entity
         *
         * > Name of entity that will restart. Platform dependent.
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: ffmpeg
         * >   domain: binary_sensor
         * > ```
         */
        entity_id?: never | never[];
      }) => Promise<void>;
      /**
       * ### Start
       *
       * > Sends a start command to an FFmpeg-based sensor.
       */
      start: (service_data?: {
        /**
         * ## Entity
         *
         * > Name of entity that will start. Platform dependent.
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: ffmpeg
         * >   domain: binary_sensor
         * > ```
         */
        entity_id?: never | never[];
      }) => Promise<void>;
      /**
       * ### Stop
       *
       * > Sends a stop command to an FFmpeg-based sensor.
       */
      stop: (service_data?: {
        /**
         * ## Entity
         *
         * > Name of entity that will stop. Platform dependent.
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: ffmpeg
         * >   domain: binary_sensor
         * > ```
         */
        entity_id?: never | never[];
      }) => Promise<void>;
    };
    // # MARK: frontend
    frontend: {
      /**
       * ### Reload themes
       *
       * > Reloads themes from the YAML-configuration.
       */
      reload_themes: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Set the default theme
       *
       * > Sets the default theme Home Assistant uses. Can be overridden by a user.
       */
      set_theme: (service_data?: {
        /**
         * ## Mode
         *
         * > Theme mode.
         *
         * ### Default
         *
         * > ```json
         * > "light"
         * > ```
         */
        mode?: "dark" | "light";
        /**
         * ## Theme
         *
         * > Name of a theme.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "default"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > theme:
         * >   include_default: true
         * > ```
         */
        name: unknown;
      }) => Promise<void>;
    };
    // # MARK: group
    group: {
      /**
       * ### Reload
       *
       * > Reloads group configuration, entities, and notify services from YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Remove
       *
       * > Removes a group.
       */
      remove: (service_data: {
        /**
         * ## Object ID
         *
         * > Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id].
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "object_id": "test_group"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        object_id: unknown;
      }) => Promise<void>;
      /**
       * ### Set
       *
       * > Creates/Updates a group.
       */
      set: (service_data?: {
        /**
         * ## Add entities
         *
         * > List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "add_entities": "domain.entity_id1, domain.entity_id2"
         * > }
         * > ```
         */
        add_entities?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## All
         *
         * > Enable this option if the group should only be used when all entities are in state `on`.
         */
        all?: boolean;
        /**
         * ## Entities
         *
         * > List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entities": "domain.entity_id1, domain.entity_id2"
         * > }
         * > ```
         */
        entities?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Icon
         *
         * > Name of the icon for the group.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "icon": "mdi:camera"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > icon: null
         * > ```
         */
        icon?: unknown;
        /**
         * ## Name
         *
         * > Name of the group.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "My test group"
         * > }
         * > ```
         */
        name?: string;
        /**
         * ## Object ID
         *
         * > Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id].
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "object_id": "test_group"
         * > }
         * > ```
         */
        object_id: string;
        /**
         * ## Remove entities
         *
         * > List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "remove_entities": "domain.entity_id1, domain.entity_id2"
         * > }
         * > ```
         */
        remove_entities?: PICK_ENTITY | PICK_ENTITY[];
      }) => Promise<void>;
    };
    // # MARK: harmony
    harmony: {
      /**
       * ### Change channel
       *
       * > Sends a change channel command to the Harmony Hub.
       */
      change_channel: (
        service_data: {
          /**
           * ## Channel
           *
           * > Channel number to change to.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 100000
           * > ```
           */
          channel: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: harmony
           * >     domain:
           * >       - remote
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"harmony", "remote">
            | PICK_FROM_PLATFORM<"harmony", "remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Sync
       *
       * > Syncs the remote's configuration.
       */
      sync: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: harmony
           * >     domain:
           * >       - remote
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"harmony", "remote">
            | PICK_FROM_PLATFORM<"harmony", "remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: hassio
    hassio: {
      /**
       * ### Restart add-on
       *
       * > Restarts an add-on.
       */
      addon_restart: (service_data: {
        /**
         * ## Add-on
         *
         * > The add-on to restart.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "addon": "core_ssh"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > addon: null
         * > ```
         */
        addon: unknown;
      }) => Promise<void>;
      /**
       * ### Start add-on
       *
       * > Starts an add-on.
       */
      addon_start: (service_data: {
        /**
         * ## Add-on
         *
         * > The add-on to start.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "addon": "core_ssh"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > addon: null
         * > ```
         */
        addon: unknown;
      }) => Promise<void>;
      /**
       * ### Write data to add-on stdin
       *
       * > Writes data to the add-on's standard input.
       */
      addon_stdin: (service_data: {
        /**
         * ## Add-on
         *
         * > The add-on to write to.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "addon": "core_ssh"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > addon: null
         * > ```
         */
        addon: unknown;
      }) => Promise<void>;
      /**
       * ### Stop add-on
       *
       * > Stops an add-on.
       */
      addon_stop: (service_data: {
        /**
         * ## Add-on
         *
         * > The add-on to stop.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "addon": "core_ssh"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > addon: null
         * > ```
         */
        addon: unknown;
      }) => Promise<void>;
      /**
       * ### Create a full backup
       *
       * > Creates a full backup.
       */
      backup_full: (service_data?: {
        /**
         * ## Compressed
         *
         * > Compresses the backup files.
         *
         * ### Default
         *
         * > ```json
         * > true
         * > ```
         */
        compressed?: boolean;
        /**
         * ## Home Assistant exclude database
         *
         * > Exclude the Home Assistant database file from the backup.
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        homeassistant_exclude_database?: boolean;
        /**
         * ## Location
         *
         * > Name of a backup network storage to host backups.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "location": "my_backup_mount"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > backup_location: null
         * > ```
         */
        location?: unknown;
        /**
         * ## Name
         *
         * > Optional (default = current date and time).
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "Backup 1"
         * > }
         * > ```
         */
        name?: string;
        /**
         * ## Password
         *
         * > Password to protect the backup with.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "password": "password"
         * > }
         * > ```
         */
        password?: string;
      }) => Promise<void>;
      /**
       * ### Create a partial backup
       *
       * > Creates a partial backup.
       */
      backup_partial: (service_data?: {
        /**
         * ## Add-ons
         *
         * > List of add-ons to include in the backup. Use the name slug of each add-on.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "addons": "core_ssh,core_samba,core_mosquitto"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        addons?: unknown;
        /**
         * ## Compressed
         *
         * > Compresses the backup files.
         *
         * ### Default
         *
         * > ```json
         * > true
         * > ```
         */
        compressed?: boolean;
        /**
         * ## Folders
         *
         * > List of directories to include in the backup.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "folders": "homeassistant,share"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        folders?: unknown;
        /**
         * ## Home Assistant settings
         *
         * > Includes Home Assistant settings in the backup.
         */
        homeassistant?: boolean;
        /**
         * ## Home Assistant exclude database
         *
         * > Exclude the Home Assistant database file from the backup.
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        homeassistant_exclude_database?: boolean;
        /**
         * ## Location
         *
         * > Name of a backup network storage to host backups.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "location": "my_backup_mount"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > backup_location: null
         * > ```
         */
        location?: unknown;
        /**
         * ## Name
         *
         * > Optional (default = current date and time).
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "Partial backup 1"
         * > }
         * > ```
         */
        name?: string;
        /**
         * ## Password
         *
         * > Password to protect the backup with.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "password": "password"
         * > }
         * > ```
         */
        password?: string;
      }) => Promise<void>;
      /**
       * ### Reboot the host system
       *
       * > Reboots the host system.
       */
      host_reboot: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Power off the host system
       *
       * > Powers off the host system.
       */
      host_shutdown: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Restore from full backup
       *
       * > Restores from full backup.
       */
      restore_full: (service_data?: {
        /**
         * ## Password
         *
         * > Optional password.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "password": "password"
         * > }
         * > ```
         */
        password?: string;
        /**
         * ## Slug
         *
         * > Slug of backup to restore from.
         */
        slug: string;
      }) => Promise<void>;
      /**
       * ### Restore from partial backup
       *
       * > Restores from a partial backup.
       */
      restore_partial: (service_data?: {
        /**
         * ## Add-ons
         *
         * > List of add-ons to restore from the backup. Use the name slug of each add-on.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "addons": "core_ssh,core_samba,core_mosquitto"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        addons?: unknown;
        /**
         * ## Folders
         *
         * > List of directories to restore from the backup.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "folders": "homeassistant,share"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        folders?: unknown;
        /**
         * ## Home Assistant settings
         *
         * > Restores Home Assistant.
         */
        homeassistant?: boolean;
        /**
         * ## Password
         *
         * > Optional password.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "password": "password"
         * > }
         * > ```
         */
        password?: string;
        /**
         * ## Slug
         *
         * > Slug of backup to restore from.
         */
        slug: string;
      }) => Promise<void>;
    };
    // # MARK: history_stats
    history_stats: {
      /**
       * ### Reload
       *
       * > Reloads history stats sensors from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: homeassistant
    homeassistant: {
      /**
       * ### Check configuration
       *
       * > Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.
       */
      check_config: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Reload all
       *
       * > Reloads all YAML configuration that can be reloaded without restarting Home Assistant.
       */
      reload_all: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Reload config entry
       *
       * > Reloads the specified config entry.
       */
      reload_config_entry: (
        service_data?: {
          /**
           * ## Config entry ID
           *
           * > The configuration entry ID of the entry to be reloaded.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "entry_id": "8955375327824e14ba89e4b29cc3ec9a"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > config_entry: null
           * > ```
           */
          entry_id?: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - {}
           * > device:
           * >   - {}
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reload Core configuration
       *
       * > Reloads the Core configuration from the YAML-configuration.
       */
      reload_core_config: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Reload custom Jinja2 templates
       *
       * > Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.
       */
      reload_custom_templates: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Restart
       *
       * > Restarts Home Assistant.
       */
      restart: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Save persistent states
       *
       * > Saves the persistent states immediately. Maintains the normal periodic saving interval.
       */
      save_persistent_states: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Set location
       *
       * > Updates the Home Assistant location.
       */
      set_location: (service_data?: {
        /**
         * ## Elevation
         *
         * > Elevation of your location above sea level.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "elevation": "120"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   mode: box
         * >   step: any
         * > ```
         */
        elevation?: number;
        /**
         * ## Latitude
         *
         * > Latitude of your location.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "latitude": "32.87336"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   mode: box
         * >   min: -90
         * >   max: 90
         * >   step: any
         * > ```
         */
        latitude: number;
        /**
         * ## Longitude
         *
         * > Longitude of your location.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "longitude": "117.22743"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   mode: box
         * >   min: -180
         * >   max: 180
         * >   step: any
         * > ```
         */
        longitude: number;
      }) => Promise<void>;
      /**
       * ### Stop
       *
       * > Stops Home Assistant.
       */
      stop: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Generic toggle
       *
       * > Generic action to toggle devices on/off under any domain.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - {}
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Generic turn off
       *
       * > Generic action to turn devices off under any domain.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - {}
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Generic turn on
       *
       * > Generic action to turn devices on under any domain.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - {}
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Update entity
       *
       * > Forces one or more entities to update their data.
       */
      update_entity: (service_data: {
        /**
         * ## Entities to update
         *
         * > List of entities to force update.
         */
        entity_id: PICK_ENTITY | PICK_ENTITY[];
      }) => Promise<void>;
    };
    // # MARK: humidifier
    humidifier: {
      /**
       * ### Set humidity
       *
       * > Sets the target humidity.
       */
      set_humidity: (
        service_data: {
          /**
           * ## Humidity
           *
           * > Target humidity.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          humidity: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - humidifier
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set mode
       *
       * > Sets the humidifier operation mode.
       */
      set_mode: (
        service_data: {
          /**
           * ## Mode
           *
           * > Operation mode. For example, "normal", "eco", or "away". For a list of possible values, refer to the integration documentation.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "mode": "away"
           * > }
           * > ```
           */
          mode: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - humidifier
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Toggles the humidifier on/off.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - humidifier
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns the humidifier off.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - humidifier
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns the humidifier on.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - humidifier
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: image
    image: {
      /**
       * ### Take snapshot
       *
       * > Takes a snapshot from an image.
       */
      snapshot: (
        service_data: {
          /**
           * ## Filename
           *
           * > Template of a filename. Variable available is `entity_id`.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "filename": "/tmp/image_snapshot.jpg"
           * > }
           * > ```
           */
          filename: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - image
           * > ```
           */
          entity_id: PICK_ENTITY<"image"> | PICK_ENTITY<"image">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: input_boolean
    input_boolean: {
      /**
       * ### Reload
       *
       * > Reloads helpers from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Toggles the helper on/off.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_boolean
           * > ```
           */
          entity_id: PICK_ENTITY<"input_boolean"> | PICK_ENTITY<"input_boolean">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns off the helper.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_boolean
           * > ```
           */
          entity_id: PICK_ENTITY<"input_boolean"> | PICK_ENTITY<"input_boolean">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns on the helper.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_boolean
           * > ```
           */
          entity_id: PICK_ENTITY<"input_boolean"> | PICK_ENTITY<"input_boolean">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: input_button
    input_button: {
      /**
       * ### Press
       *
       * > Mimics the physical button press on the device.
       */
      press: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_button
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reload
       *
       * > Reloads helpers from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: input_datetime
    input_datetime: {
      /**
       * ### Reload
       *
       * > Reloads helpers from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Set
       *
       * > Sets the date and/or time.
       */
      set_datetime: (
        service_data?: {
          /**
           * ## Date
           *
           * > The target date.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "date": "\"2019-04-20\""
           * > }
           * > ```
           */
          date?: string;
          /**
           * ## Date & time
           *
           * > The target date & time.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "datetime": "\"2019-04-20 05:04:20\""
           * > }
           * > ```
           */
          datetime?: string;
          /**
           * ## Time
           *
           * > The target time.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "time": "\"05:04:20\""
           * > }
           * > ```
           */
          time?: string;
          /**
           * ## Timestamp
           *
           * > The target date & time, expressed by a UNIX timestamp.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 9223372036854776000
           * >   mode: box
           * > ```
           */
          timestamp?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_datetime
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: input_number
    input_number: {
      /**
       * ### Decrement
       *
       * > Decrements the current value by 1 step.
       */
      decrement: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_number
           * > ```
           */
          entity_id: PICK_ENTITY<"input_number"> | PICK_ENTITY<"input_number">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Increment
       *
       * > Increments the current value by 1 step.
       */
      increment: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_number
           * > ```
           */
          entity_id: PICK_ENTITY<"input_number"> | PICK_ENTITY<"input_number">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reload
       *
       * > Reloads helpers from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Set
       *
       * > Sets the value.
       */
      set_value: (
        service_data: {
          /**
           * ## Value
           *
           * > The target value.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 9223372036854776000
           * >   step: 0.001
           * >   mode: box
           * > ```
           */
          value: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_number
           * > ```
           */
          entity_id: PICK_ENTITY<"input_number"> | PICK_ENTITY<"input_number">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: input_select
    input_select: {
      /**
       * ### Reload
       *
       * > Reloads helpers from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### First
       *
       * > Selects the first option.
       */
      select_first: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_select
           * > ```
           */
          entity_id: PICK_ENTITY<"input_select"> | PICK_ENTITY<"input_select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Last
       *
       * > Selects the last option.
       */
      select_last: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_select
           * > ```
           */
          entity_id: PICK_ENTITY<"input_select"> | PICK_ENTITY<"input_select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Next
       *
       * > Selects the next option.
       */
      select_next: (
        service_data?: {
          /**
           * ## Cycle
           *
           * > If the option should cycle from the last to the first option on the list.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          cycle?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_select
           * > ```
           */
          entity_id: PICK_ENTITY<"input_select"> | PICK_ENTITY<"input_select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Select
       *
       * > Selects an option.
       */
      select_option: (
        service_data: {
          /**
           * ## Option
           *
           * > Option to be selected.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "option": "\"Item A\""
           * > }
           * > ```
           */
          option: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_select
           * > ```
           */
          entity_id: PICK_ENTITY<"input_select"> | PICK_ENTITY<"input_select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Previous
       *
       * > Selects the previous option.
       */
      select_previous: (
        service_data?: {
          /**
           * ## Cycle
           *
           * > If the option should cycle from the first to the last option on the list.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          cycle?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_select
           * > ```
           */
          entity_id: PICK_ENTITY<"input_select"> | PICK_ENTITY<"input_select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set options
       *
       * > Sets the options.
       */
      set_options: (
        service_data: {
          /**
           * ## Options
           *
           * > List of options.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "options": "[\"Item A\", \"Item B\", \"Item C\"]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > text:
           * >   multiple: true
           * > ```
           */
          options: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_select
           * > ```
           */
          entity_id: PICK_ENTITY<"input_select"> | PICK_ENTITY<"input_select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: input_text
    input_text: {
      /**
       * ### Reload
       *
       * > Reloads helpers from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Set
       *
       * > Sets the value.
       */
      set_value: (
        service_data: {
          /**
           * ## Value
           *
           * > The target value.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "value": "This is an example text"
           * > }
           * > ```
           */
          value: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - input_text
           * > ```
           */
          entity_id: PICK_ENTITY<"input_text"> | PICK_ENTITY<"input_text">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: lifx
    lifx: {
      /**
       * ### Color loop effect
       *
       * > Runs an effect with looping colors.
       */
      effect_colorloop: (
        service_data?: {
          /**
           * ## Brightness value
           *
           * > Number indicating brightness of the color loop, where 1 is the minimum brightness and 255 is the maximum brightness supported by the light.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 255
           * > ```
           */
          brightness?: number;
          /**
           * ## Brightness
           *
           * > Percentage indicating the brightness of the color loop, where 1 is the minimum brightness and 100 is the maximum brightness supported by the light.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          brightness_pct?: number;
          /**
           * ## Change
           *
           * > Hue movement per period, in degrees on a color wheel.
           *
           * ### Default
           *
           * > ```json
           * > 20
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 360
           * >   unit_of_measurement: Â°
           * > ```
           */
          change?: number;
          /**
           * ## Period
           *
           * > Duration between color changes.
           *
           * ### Default
           *
           * > ```json
           * > 60
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0.05
           * >   max: 3600
           * >   step: 0.05
           * >   unit_of_measurement: seconds
           * > ```
           */
          period?: number;
          /**
           * ## Power on
           *
           * > Powered off lights are temporarily turned on during the effect.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          power_on?: boolean;
          /**
           * ## Maximum saturation
           *
           * > Percentage indicating the maximum saturation of the colors in the loop.
           *
           * ### Default
           *
           * > ```json
           * > 100
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          saturation_max?: number;
          /**
           * ## Minimum saturation
           *
           * > Percentage indicating the minimum saturation of the colors in the loop.
           *
           * ### Default
           *
           * > ```json
           * > 80
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          saturation_min?: number;
          /**
           * ## Spread
           *
           * > Maximum hue difference between participating lights, in degrees on a color wheel.
           *
           * ### Default
           *
           * > ```json
           * > 30
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 360
           * >   unit_of_measurement: Â°
           * > ```
           */
          spread?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Flame effect
       *
       * > Starts the firmware-based Flame effect on LIFX Tiles or Candle.
       */
      effect_flame: (
        service_data?: {
          /**
           * ## Power on
           *
           * > Powered off lights will be turned on before starting the effect.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          power_on?: boolean;
          /**
           * ## Speed
           *
           * > How fast the flames will move.
           *
           * ### Default
           *
           * > ```json
           * > 3
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 25
           * >   step: 1
           * >   unit_of_measurement: seconds
           * > ```
           */
          speed?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Morph effect
       *
       * > Starts the firmware-based Morph effect on LIFX Tiles or Candle.
       */
      effect_morph: (
        service_data?: {
          /**
           * ## Palette
           *
           * > List of at least 2 and at most 16 colors as hue (0-360), saturation (0-100), brightness (0-100) and Kelvin (1500-9000) values to use for this effect. Overrides the 'Theme' attribute.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "palette": "[[0, 100, 100, 3500], [60, 100, 100, 3500]]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          palette?: unknown;
          /**
           * ## Power on
           *
           * > Powered off lights will be turned on before starting the effect.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          power_on?: boolean;
          /**
           * ## Speed
           *
           * > How fast the colors will move.
           *
           * ### Default
           *
           * > ```json
           * > 3
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 25
           * >   step: 1
           * >   unit_of_measurement: seconds
           * > ```
           */
          speed?: number;
          /**
           * ## Theme
           *
           * > Predefined color theme to use for the effect. Overridden by the 'Palette' attribute.
           */
          theme?:
            | "autumn"
            | "blissful"
            | "bias_lighting"
            | "calaveras"
            | "cheerful"
            | "christmas"
            | "dream"
            | "energizing"
            | "epic"
            | "evening"
            | "exciting"
            | "fantasy"
            | "focusing"
            | "gentle"
            | "halloween"
            | "hanukkah"
            | "holly"
            | "hygge"
            | "independence"
            | "intense"
            | "love"
            | "kwanzaa"
            | "mellow"
            | "party"
            | "peaceful"
            | "powerful"
            | "proud"
            | "pumpkin"
            | "relaxing"
            | "romance"
            | "santa"
            | "serene"
            | "shamrock"
            | "soothing"
            | "spacey"
            | "sports"
            | "spring"
            | "stardust"
            | "thanksgiving"
            | "tranquil"
            | "warming"
            | "zombie";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Move effect
       *
       * > Starts the firmware-based Move effect on a LIFX Z, Lightstrip or Beam.
       */
      effect_move: (
        service_data?: {
          /**
           * ## Direction
           *
           * > Direction the effect will move across the device.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "direction": "right"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > "right"
           * > ```
           */
          direction?: "right" | "left";
          /**
           * ## Power on
           *
           * > Powered off lights will be turned on before starting the effect.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          power_on?: boolean;
          /**
           * ## Speed
           *
           * > How long in seconds for the effect to move across the length of the light.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "speed": "3"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > 3
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0.1
           * >   max: 60
           * >   step: 0.1
           * >   unit_of_measurement: seconds
           * > ```
           */
          speed?: number;
          /**
           * ## Theme
           *
           * > (Optional) set one of the predefined themes onto the device before starting the effect.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "theme": "exciting"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > "exciting"
           * > ```
           */
          theme?:
            | "autumn"
            | "blissful"
            | "bias_lighting"
            | "calaveras"
            | "cheerful"
            | "christmas"
            | "dream"
            | "energizing"
            | "epic"
            | "evening"
            | "exciting"
            | "fantasy"
            | "focusing"
            | "gentle"
            | "halloween"
            | "hanukkah"
            | "holly"
            | "hygge"
            | "independence"
            | "intense"
            | "love"
            | "kwanzaa"
            | "mellow"
            | "party"
            | "peaceful"
            | "powerful"
            | "proud"
            | "pumpkin"
            | "relaxing"
            | "romance"
            | "santa"
            | "serene"
            | "shamrock"
            | "soothing"
            | "spacey"
            | "sports"
            | "spring"
            | "stardust"
            | "thanksgiving"
            | "tranquil"
            | "warming"
            | "zombie";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Pulse effect
       *
       * > Runs a flash effect by changing to a color and back.
       */
      effect_pulse: (
        service_data?: {
          /**
           * ## Brightness value
           *
           * > Number indicating brightness of the temporary color, where 1 is the minimum brightness and 255 is the maximum brightness supported by the light.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 255
           * > ```
           */
          brightness?: number;
          /**
           * ## Brightness
           *
           * > Percentage indicating the brightness of the temporary color, where 1 is the minimum brightness and 100 is the maximum brightness supported by the light.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          brightness_pct?: number;
          /**
           * ## Color name
           *
           * > A human-readable color name.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "color_name": "red"
           * > }
           * > ```
           */
          color_name?: string;
          /**
           * ## Cycles
           *
           * > Number of times the effect should run.
           *
           * ### Default
           *
           * > ```json
           * > 1
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 10000
           * > ```
           */
          cycles?: number;
          /**
           * ## Mode
           *
           * > Decides how colors are changed.
           */
          mode?: "blink" | "breathe" | "ping" | "strobe" | "solid";
          /**
           * ## Period
           *
           * > Duration of the effect.
           *
           * ### Default
           *
           * > ```json
           * > 1
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0.05
           * >   max: 60
           * >   step: 0.05
           * >   unit_of_measurement: seconds
           * > ```
           */
          period?: number;
          /**
           * ## Power on
           *
           * > Powered off lights are temporarily turned on during the effect.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          power_on?: boolean;
          /**
           * ## RGB color
           *
           * > The temporary color in RGB-format.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "rgb_color": "[255, 100, 100]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          rgb_color?: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Sky effect
       *
       * > Starts a firmware-based effect on LIFX Ceiling lights that animates a sky scene across the device.
       */
      effect_sky: (
        service_data?: {
          /**
           * ## Cloud saturation maximum
           *
           * > The maximum cloud saturation for the Clouds sky type.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "cloud_saturation_max": "180"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > 180
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 255
           * > ```
           */
          cloud_saturation_max?: number;
          /**
           * ## Cloud saturation minimum
           *
           * > The minimum cloud saturation for the Clouds sky type.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "cloud_saturation_min": "50"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > 50
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 255
           * > ```
           */
          cloud_saturation_min?: number;
          /**
           * ## Palette
           *
           * > List of 1 to 6 colors as hue (0-360), saturation (0-100), brightness (0-100) and Kelvin (1500-9000) values to use for this effect.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "palette": "[200, 1, 1, 3500],[241, 1, 0.01, 3500],[189, 1, 0.08, 3500],[40, 1, 1, 3500],[40, 0.5, 1, 3500],[40, 0, 1, 6500]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          palette?: unknown;
          /**
           * ## Power on
           *
           * > Powered off lights will be turned on before starting the effect.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          power_on?: boolean;
          /**
           * ## Sky type
           *
           * > The style of sky that will be animated by the effect.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "sky_type": "Clouds"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > "Clouds"
           * > ```
           */
          sky_type?: "Clouds" | "Sunrise" | "Sunset";
          /**
           * ## Speed
           *
           * > How long the Sunrise and Sunset sky types will take to complete. For the Clouds sky type, it is the speed of the clouds across the device.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "speed": "50"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > 50
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 86400
           * >   step: 1
           * >   unit_of_measurement: seconds
           * > ```
           */
          speed?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Stop effect
       *
       * > Stops a running effect.
       */
      effect_stop: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Paint theme
       *
       * > Paints either a provided theme or custom palette across one or more LIFX lights.
       */
      paint_theme: (
        service_data?: {
          /**
           * ## Palette
           *
           * > List of at least 2 and at most 16 colors as hue (0-360), saturation (0-100), brightness (0-100) and Kelvin (1500-9000) values to paint across the target lights. Overrides the 'Theme' attribute.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "palette": "[[0, 100, 100, 3500], [60, 100, 100, 3500]]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          palette?: unknown;
          /**
           * ## Power on
           *
           * > Powered off lights will be turned on before painting the theme.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          power_on?: boolean;
          /**
           * ## Theme
           *
           * > Predefined color theme to paint. Overridden by the 'Palette' attribute.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "theme": "exciting"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > "exciting"
           * > ```
           */
          theme?:
            | "autumn"
            | "blissful"
            | "bias_lighting"
            | "calaveras"
            | "cheerful"
            | "christmas"
            | "dream"
            | "energizing"
            | "epic"
            | "evening"
            | "exciting"
            | "fantasy"
            | "focusing"
            | "gentle"
            | "halloween"
            | "hanukkah"
            | "holly"
            | "hygge"
            | "independence"
            | "intense"
            | "love"
            | "kwanzaa"
            | "mellow"
            | "party"
            | "peaceful"
            | "powerful"
            | "proud"
            | "pumpkin"
            | "relaxing"
            | "romance"
            | "santa"
            | "serene"
            | "shamrock"
            | "soothing"
            | "spacey"
            | "sports"
            | "spring"
            | "stardust"
            | "thanksgiving"
            | "tranquil"
            | "warming"
            | "zombie";
          /**
           * ## Transition
           *
           * > Duration in seconds to paint the theme.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 3600
           * >   unit_of_measurement: seconds
           * > ```
           */
          transition?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set HEV cycle state
       *
       * > Controls the HEV LEDs on a LIFX Clean bulb.
       */
      set_hev_cycle_state: (
        service_data?: {
          /**
           * ## Duration
           *
           * > How long the HEV LEDs will remain on. Uses the configured default duration if not specified.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "duration": "3600"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > 7200
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 86400
           * >   unit_of_measurement: seconds
           * > ```
           */
          duration?: number;
          /**
           * ## Enable
           *
           * > Start or stop a Clean cycle.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "power": "true"
           * > }
           * > ```
           */
          power: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set state
       *
       * > Sets a color/brightness and possibly turn the light on/off.
       */
      set_state: (
        service_data?: {
          /**
           * ## Infrared
           *
           * > Automatic infrared level when light brightness is low.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 255
           * > ```
           */
          infrared?: number;
          /**
           * ## Power
           *
           * > Turn the light on or off. Leave out to keep the power as it is.
           */
          power?: boolean;
          /**
           * ## Transition
           *
           * > Duration it takes to get to the final state.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 3600
           * >   unit_of_measurement: seconds
           * > ```
           */
          transition?: number;
          /**
           * ## Zones
           *
           * > List of zone numbers to affect (8 per LIFX Z, starts at 0).
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "zones": "[0,5]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          zones?: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: lifx
           * >     domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"lifx", "light"> | PICK_FROM_PLATFORM<"lifx", "light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: light
    light: {
      /**
       * ### Toggle
       *
       * > Toggles one or more lights, from on to off, or off to on, based on their current state.
       */
      toggle: (
        service_data?: {
          /**
           * ## advanced_fields
           *
           * ## Selector
           *
           * > ```yaml
           * >
           * > ```
           */
          advanced_fields?: unknown;
          /**
           * ## Brightness
           *
           * > Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          brightness_pct?: number;
          /**
           * ## Color temperature
           *
           * > Color temperature in Kelvin.
           *
           * ## Selector
           *
           * > ```yaml
           * > color_temp:
           * >   unit: kelvin
           * >   min: 2000
           * >   max: 6500
           * > ```
           */
          color_temp_kelvin?: unknown;
          /**
           * ## Effect
           *
           * > Light effect.
           */
          effect?: string;
          /**
           * ## Color
           *
           * > The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "rgb_color": "[255, 100, 100]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > color_rgb: null
           * > ```
           */
          rgb_color?: unknown;
          /**
           * ## Transition
           *
           * > Duration it takes to get to next state.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 300
           * >   unit_of_measurement: seconds
           * > ```
           */
          transition?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_ENTITY<"light"> | PICK_ENTITY<"light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns off one or more lights.
       */
      turn_off: (
        service_data?: {
          /**
           * ## advanced_fields
           *
           * ## Selector
           *
           * > ```yaml
           * >
           * > ```
           */
          advanced_fields?: unknown;
          /**
           * ## Transition
           *
           * > Duration it takes to get to next state.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 300
           * >   unit_of_measurement: seconds
           * > ```
           */
          transition?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_ENTITY<"light"> | PICK_ENTITY<"light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns on one or more lights and adjusts their properties, even when they are turned on already.
       */
      turn_on: (
        service_data?: {
          /**
           * ## advanced_fields
           *
           * ## Selector
           *
           * > ```yaml
           * >
           * > ```
           */
          advanced_fields?: unknown;
          /**
           * ## Brightness
           *
           * > Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          brightness_pct?: number;
          /**
           * ## Brightness step
           *
           * > Change brightness by a percentage.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: -100
           * >   max: 100
           * >   unit_of_measurement: '%'
           * > ```
           */
          brightness_step_pct?: number;
          /**
           * ## Color temperature
           *
           * > Color temperature in Kelvin.
           *
           * ## Selector
           *
           * > ```yaml
           * > color_temp:
           * >   unit: kelvin
           * >   min: 2000
           * >   max: 6500
           * > ```
           */
          color_temp_kelvin?: unknown;
          /**
           * ## Effect
           *
           * > Light effect.
           */
          effect?: string;
          /**
           * ## Color
           *
           * > The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "rgb_color": "[255, 100, 100]"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > color_rgb: null
           * > ```
           */
          rgb_color?: unknown;
          /**
           * ## Transition
           *
           * > Duration it takes to get to next state.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 300
           * >   unit_of_measurement: seconds
           * > ```
           */
          transition?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - light
           * > ```
           */
          entity_id: PICK_ENTITY<"light"> | PICK_ENTITY<"light">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: lock
    lock: {
      /**
       * ### Lock
       *
       * > Locks a lock.
       */
      lock: (
        service_data?: {
          /**
           * ## Code
           *
           * > Code used to lock the lock.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "code": "1234"
           * > }
           * > ```
           */
          code?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - lock
           * > ```
           */
          entity_id: PICK_ENTITY<"lock"> | PICK_ENTITY<"lock">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Open
       *
       * > Opens a lock.
       */
      open: (
        service_data?: {
          /**
           * ## Code
           *
           * > Code used to open the lock.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "code": "1234"
           * > }
           * > ```
           */
          code?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - lock
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: PICK_ENTITY<"lock"> | PICK_ENTITY<"lock">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Unlock
       *
       * > Unlocks a lock.
       */
      unlock: (
        service_data?: {
          /**
           * ## Code
           *
           * > Code used to unlock the lock.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "code": "1234"
           * > }
           * > ```
           */
          code?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - lock
           * > ```
           */
          entity_id: PICK_ENTITY<"lock"> | PICK_ENTITY<"lock">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: logbook
    logbook: {
      /**
       * ### Log
       *
       * > Creates a custom entry in the logbook.
       */
      log: (service_data?: {
        /**
         * ## Domain
         *
         * > Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "domain": "light"
         * > }
         * > ```
         */
        domain?: string;
        /**
         * ## Entity ID
         *
         * > Entity to reference in the logbook entry.
         *
         * ## Selector
         *
         * > ```yaml
         * > entity: null
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Message
         *
         * > Message of the logbook entry.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "is being used"
         * > }
         * > ```
         */
        message: string;
        /**
         * ## Name
         *
         * > Custom name for an entity, can be referenced using the 'Entity ID' field.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "Kitchen"
         * > }
         * > ```
         */
        name: string;
      }) => Promise<void>;
    };
    // # MARK: logger
    logger: {
      /**
       * ### Set default level
       *
       * > Sets the default log level for integrations.
       */
      set_default_level: (service_data?: {
        /**
         * ## Level
         *
         * > Default severity level for all integrations.
         */
        level?: "debug" | "info" | "warning" | "error" | "fatal" | "critical";
      }) => Promise<void>;
      /**
       * ### Set level
       *
       * > Sets the log level for one or more integrations.
       */
      set_level: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: media_player
    media_player: {
      /**
       * ### Browse media
       *
       * > Browses the available media.
       */
      browse_media: <T = unknown>(
        service_data?: {
          /**
           * ## Content ID
           *
           * > The ID of the content to browse. Integration dependent.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_content_id": "A:ALBUMARTIST/Beatles"
           * > }
           * > ```
           */
          media_content_id?: string;
          /**
           * ## Content type
           *
           * > The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_content_type": "music"
           * > }
           * > ```
           */
          media_content_type?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 131072
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
      /**
       * ### Clear playlist
       *
       * > Removes all items from the playlist.
       */
      clear_playlist: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 8192
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Join
       *
       * > Groups media players together for synchronous playback. Only works on supported multiroom audio systems.
       */
      join: (
        service_data: {
          /**
           * ## Group members
           *
           * > The players which will be synced with the playback specified in 'Targets'.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "group_members": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > entity:
           * >   multiple: true
           * >   domain: media_player
           * > ```
           */
          group_members: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 524288
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Next
       *
       * > Selects the next track.
       */
      media_next_track: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 32
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Pause
       *
       * > Pauses.
       */
      media_pause: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Play
       *
       * > Starts playing.
       */
      media_play: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 16384
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Play/Pause
       *
       * > Toggles play/pause.
       */
      media_play_pause: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 16385
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Previous
       *
       * > Selects the previous track.
       */
      media_previous_track: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 16
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Seek
       *
       * > Allows you to go to a different part of the media that is currently playing.
       */
      media_seek: (
        service_data: {
          /**
           * ## Position
           *
           * > Target position in the currently playing media. The format is platform dependent.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 9223372036854776000
           * >   step: 0.01
           * >   mode: box
           * > ```
           */
          seek_position: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 2
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Stop
       *
       * > Stops playing.
       */
      media_stop: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 4096
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Play media
       *
       * > Starts playing specified media.
       */
      play_media: (
        service_data?: {
          /**
           * ## Announce
           *
           * > If the media should be played as an announcement.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "announce": "true"
           * > }
           * > ```
           */
          announce?: boolean;
          /**
           * ## Enqueue
           *
           * > If the content should be played now or be added to the queue.
           */
          enqueue?: "play" | "next" | "add" | "replace";
          /**
           * ## Content ID
           *
           * > The ID of the content to play. Platform dependent.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_content_id": "https://home-assistant.io/images/cast/splash.png"
           * > }
           * > ```
           */
          media_content_id: string;
          /**
           * ## Content type
           *
           * > The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_content_type": "music"
           * > }
           * > ```
           */
          media_content_type: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 512
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set repeat
       *
       * > Sets the repeat mode.
       */
      repeat_set: (
        service_data: {
          /**
           * ## Repeat mode
           *
           * > Whether the media (one or all) should be played in a loop or not.
           */
          repeat: "off" | "all" | "one";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 262144
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Search media
       *
       * > Searches the available media.
       */
      search_media: <T = unknown>(
        service_data?: {
          /**
           * ## Content ID
           *
           * > The ID of the content to browse. Integration dependent.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_content_id": "A:ALBUMARTIST/Beatles"
           * > }
           * > ```
           */
          media_content_id?: string;
          /**
           * ## Content type
           *
           * > The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_content_type": "music"
           * > }
           * > ```
           */
          media_content_type?: string;
          /**
           * ## Media class filter
           *
           * > List of media classes to filter the search results by.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_filter_classes": "album,artist"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > text:
           * >   multiple: true
           * > ```
           */
          media_filter_classes?: string;
          /**
           * ## Search query
           *
           * > The term to search for.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "search_query": "Beatles"
           * > }
           * > ```
           */
          search_query: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 4194304
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
      /**
       * ### Select sound mode
       *
       * > Selects a specific sound mode.
       */
      select_sound_mode: (
        service_data?: {
          /**
           * ## Sound mode
           *
           * > Name of the sound mode to switch to.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "sound_mode": "Music"
           * > }
           * > ```
           */
          sound_mode?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 65536
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Select source
       *
       * > Sends the media player the command to change input source.
       */
      select_source: (
        service_data: {
          /**
           * ## Source
           *
           * > Name of the source to switch to. Platform dependent.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "source": "video1"
           * > }
           * > ```
           */
          source: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 2048
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set shuffle
       *
       * > Enables or disables the shuffle mode.
       */
      shuffle_set: (
        service_data: {
          /**
           * ## Shuffle mode
           *
           * > Whether the media should be played in randomized order or not.
           */
          shuffle: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 32768
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Toggles a media player on/off.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 384
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns off the power of the media player.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 256
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns on the power of the media player.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 128
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Unjoin
       *
       * > Removes the player from a group. Only works on platforms which support player groups.
       */
      unjoin: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 524288
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn down volume
       *
       * > Turns down the volume.
       */
      volume_down: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 4
           * >       - 1024
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Mute/unmute volume
       *
       * > Mutes or unmutes the media player.
       */
      volume_mute: (
        service_data: {
          /**
           * ## Muted
           *
           * > Defines whether or not it is muted.
           */
          is_volume_muted: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 8
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set volume
       *
       * > Sets the volume level.
       */
      volume_set: (
        service_data: {
          /**
           * ## Level
           *
           * > The volume. 0 is inaudible, 1 is the maximum volume.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 1
           * >   step: 0.01
           * > ```
           */
          volume_level: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 4
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn up volume
       *
       * > Turns up the volume.
       */
      volume_up: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     supported_features:
           * >       - 4
           * >       - 1024
           * > ```
           */
          entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: miele
    miele: {
      /**
       * ### Execute generic action
       *
       * > Execute one action on a device
       */
      generic_action: (service_data?: {
        /**
         * ## colors
         *
         * > Set color of ambient light
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "colors": "blue"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        colors?: unknown;
        /**
         * ## deviceName
         *
         * > Rename device
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "deviceName": "A new name"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        deviceName?: unknown;
        /**
         * ## light
         *
         * > Set light on or off
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "light": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        light?: unknown;
        /**
         * ## modes
         *
         * > Set mode
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "modes": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        modes?: unknown;
        /**
         * ## powerOff
         *
         * > Power off appliance
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "powerOff": "true"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        powerOff?: unknown;
        /**
         * ## powerOn
         *
         * > Power on appliance
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "powerOn": "true"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        powerOn?: unknown;
        /**
         * ## processAction
         *
         * > Set processAction
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "processAction": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        processAction?: unknown;
        /**
         * ## programId
         *
         * > Set program
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "programId": "24"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        programId?: unknown;
        /**
         * ## startTime
         *
         * > Set start time
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "startTime": "[1, 30]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        startTime?: unknown;
        /**
         * ## targetTemperature
         *
         * > Set target temperature
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "targetTemperature": "[{ \"zone\": 1, \"value\": 5 }]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        targetTemperature?: unknown;
        /**
         * ## ventilationStep
         *
         * > Select ventilation step
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "ventilationStep": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        ventilationStep?: unknown;
      }) => Promise<void>;
      /**
       * ### Execute process action
       *
       * > Executes process actions if preconditions are met.
       */
      process_action: (service_data: {
        /**
         * ## Action
         *
         * > Select one process action to execute.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "action": "start"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > ""
         * > ```
         */
        action:
          | "start"
          | "stop"
          | "pause"
          | "start_superfreezing"
          | "stop_superfreezing"
          | "start_supercooling"
          | "stop_supercooling";
      }) => Promise<void>;
      /**
       * ### Execute raw action
       *
       * > Execute service with minimal validation.
       */
      raw: (service_data?: {
        /**
         * ## Extra
         *
         * > A dictionary with parameters
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "extra": "{ \"targetTemperature\": [{\"zone\": 1, \"value\": -18 }] }"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        extra?: unknown;
        /**
         * ## Serial number
         *
         * > The serial number of the appliance
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "serialno": "123456"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        serialno?: unknown;
      }) => Promise<void>;
      /**
       * ### Set program
       *
       * > Set and start program with optional parameters.
       */
      set_program: (service_data?: {
        /**
         * ## programId
         *
         * > Set program Id
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "programId": "24"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * >
         * > ```
         */
        programId?: unknown;
      }) => Promise<void>;
    };
    // # MARK: mqtt
    mqtt: {
      /**
       * ### Export
       *
       * > Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.
       */
      dump: (service_data?: {
        /**
         * ## Duration
         *
         * > How long we should listen for messages in seconds.
         *
         * ### Default
         *
         * > ```json
         * > 5
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 1
         * >   max: 300
         * >   unit_of_measurement: seconds
         * > ```
         */
        duration?: number;
        /**
         * ## Topic
         *
         * > Topic to listen to.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "topic": "OpenZWave/#"
         * > }
         * > ```
         */
        topic?: string;
      }) => Promise<void>;
      /**
       * ### Publish
       *
       * > Publishes a message to an MQTT topic.
       */
      publish: (service_data?: {
        /**
         * ## Evaluate payload
         *
         * > If 'Payload' is a Python bytes literal, evaluate the bytes literal and publish the raw data.
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        evaluate_payload?: boolean;
        /**
         * ## Payload
         *
         * > The payload to publish. Publishes an empty message if not provided.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "payload": "The temperature is {{ states('sensor.temperature') }}"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > template: null
         * > ```
         */
        payload?: unknown;
        /**
         * ## QoS
         *
         * > Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.
         *
         * ### Default
         *
         * > ```json
         * > 0
         * > ```
         */
        qos?: "0" | "1" | "2";
        /**
         * ## Retain
         *
         * > If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        retain?: boolean;
        /**
         * ## Topic
         *
         * > Topic to publish to.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "topic": "/homeassistant/hello"
         * > }
         * > ```
         */
        topic: string;
      }) => Promise<void>;
      /**
       * ### Reload
       *
       * > Reloads MQTT entities from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: music_assistant
    music_assistant: {
      /**
       * ### Get library items
       *
       * > Retrieves items from a Music Assistant library.
       */
      get_library: <T = unknown>(service_data?: {
        /**
         * ## Enable album artists filter (only for artist library)
         *
         * > Only return album artists when listing the artists library items.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "album_artists_only": "true"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        album_artists_only?: boolean;
        /**
         * ## Album type filter (albums library only)
         *
         * > Filter albums by type.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "album_type": "single"
         * > }
         * > ```
         */
        album_type?: ("album" | "single" | "compilation" | "ep" | "unknown")[];
        /**
         * ## Music Assistant instance
         *
         * > Select the Music Assistant instance to perform the search on.
         *
         * ## Selector
         *
         * > ```yaml
         * > config_entry:
         * >   integration: music_assistant
         * > ```
         */
        config_entry_id: unknown;
        /**
         * ## Favorites only
         *
         * > Filter items so only favorites items are returned.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "favorite": "true"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        favorite?: boolean;
        /**
         * ## Limit
         *
         * > Maximum number of items to return.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "limit": "25"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > 25
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 1
         * >   max: 500
         * >   step: 1
         * > ```
         */
        limit?: number;
        /**
         * ## Media type
         *
         * > The media type for which to request details for.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "media_type": "playlist"
         * > }
         * > ```
         */
        media_type: "artist" | "album" | "audiobook" | "playlist" | "podcast" | "track" | "radio";
        /**
         * ## Offset
         *
         * > Offset to start the list from.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "offset": "25"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > 0
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 1
         * >   max: 1000000
         * >   step: 1
         * > ```
         */
        offset?: number;
        /**
         * ## Order by
         *
         * > Sort the list by this field.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "order_by": "random"
         * > }
         * > ```
         */
        order_by?:
          | "name"
          | "name_desc"
          | "sort_name"
          | "sort_name_desc"
          | "timestamp_added"
          | "timestamp_added_desc"
          | "last_played"
          | "last_played_desc"
          | "play_count"
          | "play_count_desc"
          | "year"
          | "year_desc"
          | "position"
          | "position_desc"
          | "artist_name"
          | "artist_name_desc"
          | "random"
          | "random_play_count";
        /**
         * ## Search
         *
         * > Optional search string to search through this library.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "search": "We Are The Champions"
         * > }
         * > ```
         */
        search?: string;
      }) => Promise<T>;
      /**
       * ### Get playerQueue details (advanced)
       *
       * > Retrieves the details of the currently active queue of a Music Assistant player.
       */
      get_queue: <T = unknown>(
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     integration: music_assistant
           * >     supported_features:
           * >       - 512
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
      /**
       * ### Play announcement
       *
       * > Plays an announcement on a Music Assistant player with more fine-grained control options.
       */
      play_announcement: (
        service_data?: {
          /**
           * ## Announce volume
           *
           * > Use a forced volume level for the announcement. Omit to use player default.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "announce_volume": "75"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 1
           * >   max: 100
           * >   step: 1
           * > ```
           */
          announce_volume?: number;
          /**
           * ## URL
           *
           * > URL to the notification sound.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "url": "http://someremotesite.com/doorbell.mp3"
           * > }
           * > ```
           */
          url: string;
          /**
           * ## Use pre-announce
           *
           * > Use pre-announcement sound for the announcement. Omit to use the player default.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "use_pre_announce": "true"
           * > }
           * > ```
           */
          use_pre_announce?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     integration: music_assistant
           * >     supported_features:
           * >       - 512
           * >       - 1048576
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Play media
       *
       * > Plays media on a Music Assistant player with more fine-grained control options.
       */
      play_media: (
        service_data?: {
          /**
           * ## Album name
           *
           * > When specifying a track by name in the Media ID field, you can optionally restrict results by this album name.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "album": "News of the world"
           * > }
           * > ```
           */
          album?: string;
          /**
           * ## Artist name
           *
           * > When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "artist": "Queen"
           * > }
           * > ```
           */
          artist?: string;
          /**
           * ## Enqueue
           *
           * > If the content should be played now or added to the queue.
           */
          enqueue?: "play" | "replace" | "next" | "replace_next" | "add";
          /**
           * ## Media ID(s)
           *
           * > URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_id": "spotify://playlist/aabbccddeeff"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          media_id: unknown;
          /**
           * ## Media type
           *
           * > The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "media_type": "playlist"
           * > }
           * > ```
           */
          media_type?:
            | "artist"
            | "album"
            | "audiobook"
            | "folder"
            | "playlist"
            | "podcast"
            | "track"
            | "radio";
          /**
           * ## Enable radio mode
           *
           * > Enable radio mode to auto-generate a playlist based on the selection.
           */
          radio_mode?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     integration: music_assistant
           * >     supported_features:
           * >       - 512
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Search Music Assistant
       *
       * > Performs a global search on the Music Assistant library and all providers.
       */
      search: <T = unknown>(service_data?: {
        /**
         * ## Album name
         *
         * > When specifying a track name in the name field, you can optionally restrict results by this album name.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "album": "News of the world"
         * > }
         * > ```
         */
        album?: string;
        /**
         * ## Artist name
         *
         * > When specifying a track or album name in the name field, you can optionally restrict results by this artist name.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "artist": "Queen"
         * > }
         * > ```
         */
        artist?: string;
        /**
         * ## Music Assistant instance
         *
         * > Select the Music Assistant instance to perform the search on.
         *
         * ## Selector
         *
         * > ```yaml
         * > config_entry:
         * >   integration: music_assistant
         * > ```
         */
        config_entry_id: unknown;
        /**
         * ## Only library items
         *
         * > Only include results that are in the library.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "library_only": "true"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        library_only?: boolean;
        /**
         * ## Limit
         *
         * > Maximum number of items to return (per media type).
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "limit": "25"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > 5
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 1
         * >   max: 100
         * >   step: 1
         * > ```
         */
        limit?: number;
        /**
         * ## Media type(s)
         *
         * > The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "media_type": "playlist"
         * > }
         * > ```
         */
        media_type?: (
          | "artist"
          | "album"
          | "audiobook"
          | "playlist"
          | "podcast"
          | "track"
          | "radio"
        )[];
        /**
         * ## Search name
         *
         * > The name/title to search for.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "We Are The Champions"
         * > }
         * > ```
         */
        name: string;
      }) => Promise<T>;
      /**
       * ### Transfer queue
       *
       * > Transfers a player's queue to another player.
       */
      transfer_queue: (
        service_data?: {
          /**
           * ## Auto play
           *
           * > Start playing the queue on the target player. Omit to use the default behavior.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "auto_play": "true"
           * > }
           * > ```
           */
          auto_play?: boolean;
          /**
           * ## Source media player
           *
           * > The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.
           *
           * ## Selector
           *
           * > ```yaml
           * > entity:
           * >   domain: media_player
           * >   integration: music_assistant
           * > ```
           */
          source_player?:
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">[];
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - media_player
           * >     integration: music_assistant
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">
            | PICK_FROM_PLATFORM<"music_assistant", "media_player">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: notify
    notify: {
      /**
       * ### Send a notification with all
       *
       * > Sends a notification message using the all service.
       */
      all: (service_data?: {
        /**
         * ## data
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## target
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "target": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        target?: unknown;
        /**
         * ## title
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Send a notification with jeff
       *
       * > Sends a notification message using the jeff service.
       */
      jeff: (service_data?: {
        /**
         * ## data
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## target
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "target": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        target?: unknown;
        /**
         * ## title
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Send a notification via mobile_app_jeffs_macbook_pro
       *
       * > Sends a notification message using the mobile_app_jeffs_macbook_pro integration.
       */
      mobile_app_jeffs_macbook_pro: (service_data?: {
        /**
         * ## data
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## target
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "target": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        target?: unknown;
        /**
         * ## title
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Send a notification via mobile_app_pixel_6
       *
       * > Sends a notification message using the mobile_app_pixel_6 integration.
       */
      mobile_app_pixel_6: (service_data?: {
        /**
         * ## data
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## target
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "target": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        target?: unknown;
        /**
         * ## title
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Send a notification via mobile_app_pixel_8_pro
       *
       * > Sends a notification message using the mobile_app_pixel_8_pro integration.
       */
      mobile_app_pixel_8_pro: (service_data?: {
        /**
         * ## data
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## target
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "target": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        target?: unknown;
        /**
         * ## title
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Send a notification with notify
       *
       * > Sends a notification message using the notify service.
       */
      notify: (service_data?: {
        /**
         * ## data
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## target
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "target": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        target?: unknown;
        /**
         * ## title
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Send a persistent notification
       *
       * > Sends a notification that is visible in the notifications panel.
       */
      persistent_notification: (service_data?: {
        /**
         * ## Data
         *
         * > Some integrations provide extended functionality via this field. For more information, refer to the integration documentation.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## Message
         *
         * > Message body of the notification.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## Title
         *
         * > Title of the notification.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Send a notification message
       *
       * > Sends a notification message.
       */
      send_message: (
        service_data?: {
          /**
           * ## Message
           *
           * > Your notification message.
           */
          message: string;
          /**
           * ## Title
           *
           * > Title for your notification message.
           */
          title?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - notify
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Send a notification with stephanie
       *
       * > Sends a notification message using the stephanie service.
       */
      stephanie: (service_data?: {
        /**
         * ## data
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "data": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        data?: NotificationData & (AndroidNotificationData | AppleNotificationData);
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "The garage door has been open for 10 minutes."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## target
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "target": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        target?: unknown;
        /**
         * ## title
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Your Garage Door Friend"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
    };
    // # MARK: number
    number: {
      /**
       * ### Set
       *
       * > Sets the value of a number.
       */
      set_value: (
        service_data: {
          /**
           * ## Value
           *
           * > The target value to set.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "value": "42"
           * > }
           * > ```
           */
          value: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - number
           * > ```
           */
          entity_id: PICK_ENTITY<"number"> | PICK_ENTITY<"number">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: opensprinkler
    opensprinkler: {
      /**
       * ### Pause Stations
       *
       * > Pause all stations for the given duration.
       */
      pause_stations: (
        service_data: {
          /**
           * ## Pause duration
           *
           * > Duration to pause in seconds.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "pause_duration": "600"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 86400
           * >   mode: slider
           * >   unit_of_measurement: s
           * > ```
           */
          pause_duration: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - controller
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reboot
       *
       * > Reboot the controller.
       */
      reboot: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - controller
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Run
       *
       * > Runs a controller program or station.
       */
      run: (
        service_data?: {
          /**
           * ## Continue running stations
           *
           * > Keeps running stations that are not specified running (only used for controllers with index/second pairs, optional, defaults to False).
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "continue_running_stations": "false"
           * > }
           * > ```
           */
          continue_running_stations?: boolean;
          /**
           * ## Run seconds
           *
           * > Number of seconds to run (optional for stations, defaults to 60 seconds; required for controllers, list of seconds for each station or index and seconds pairs).
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "run_seconds": "60"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 64800
           * >   mode: slider
           * >   unit_of_measurement: s
           * > ```
           */
          run_seconds?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - controller
           * >       - program
           * >       - station
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Run Once
       *
       * > Runs a controller.
       */
      run_once: (
        service_data?: {
          /**
           * ## Continue running stations
           *
           * > Keeps running stations that are not specified (only used for controllers with index/seconds pairs, optional, defaults to False).
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "continue_running_stations": "false"
           * > }
           * > ```
           */
          continue_running_stations?: boolean;
          /**
           * ## Run seconds
           *
           * > List of seconds for each station (e.g. '- 60'), or key/value pairs (e.g. '0: 60'). One per line. See documentation for details.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "run_seconds": "0: 60"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          run_seconds?: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - controller
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Run Program
       *
       * > Runs a Program.
       */
      run_program: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - program
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Run Station
       *
       * > Runs a Station for the specified number of seconds.
       */
      run_station: (
        service_data?: {
          /**
           * ## Run seconds
           *
           * > Number of seconds to run the station. Optional, defaults to 60 seconds.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "run_seconds": "60"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 64800
           * >   mode: slider
           * >   unit_of_measurement: s
           * > ```
           */
          run_seconds?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - station
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set rain delay
       *
       * > Set rain delay of the sprinkler.
       */
      set_rain_delay: (
        service_data: {
          /**
           * ## Rain delay
           *
           * > Rain delay in hours.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "rain_delay": "24"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 32767
           * >   mode: slider
           * >   unit_of_measurement: h
           * > ```
           */
          rain_delay: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - controller
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set water level
       *
       * > Set water level percentage.
       */
      set_water_level: (
        service_data: {
          /**
           * ## Water level
           *
           * > Percentage of water level.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "water_level": "100"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 250
           * >   mode: slider
           * >   unit_of_measurement: '%'
           * > ```
           */
          water_level: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - controller
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Stop
       *
       * > Stops a station or all station (for controller).
       */
      stop: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - device_class:
           * >       - controller
           * >       - station
           * > device: []
           * > ```
           */
          entity_id: PICK_ENTITY | PICK_ENTITY[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: persistent_notification
    persistent_notification: {
      /**
       * ### Create
       *
       * > Shows a notification on the notifications panel.
       */
      create: (service_data?: {
        /**
         * ## Message
         *
         * > Message body of the notification.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "Please check your configuration.yaml."
         * > }
         * > ```
         */
        message: string;
        /**
         * ## Notification ID
         *
         * > ID of the notification. This new notification will overwrite an existing notification with the same ID.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "notification_id": "1234"
         * > }
         * > ```
         */
        notification_id?: string;
        /**
         * ## Title
         *
         * > Optional title of the notification.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "title": "Test notification"
         * > }
         * > ```
         */
        title?: string;
      }) => Promise<void>;
      /**
       * ### Dismiss
       *
       * > Deletes a notification from the notifications panel.
       */
      dismiss: (service_data: {
        /**
         * ## Notification ID
         *
         * > ID of the notification to be deleted.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "notification_id": "1234"
         * > }
         * > ```
         */
        notification_id: string;
      }) => Promise<void>;
      /**
       * ### Dismiss all
       *
       * > Deletes all notifications from the notifications panel.
       */
      dismiss_all: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: person
    person: {
      /**
       * ### Reload
       *
       * > Reloads persons from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: plex
    plex: {
      /**
       * ### Refresh library
       *
       * > Refreshes a Plex library to scan for new and updated media.
       */
      refresh_library: (service_data?: {
        /**
         * ## Library name
         *
         * > Name of the Plex library to refresh.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "library_name": "TV Shows"
         * > }
         * > ```
         */
        library_name: string;
        /**
         * ## Server name
         *
         * > Name of a Plex server if multiple Plex servers configured.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "server_name": "My Plex Server"
         * > }
         * > ```
         */
        server_name?: string;
      }) => Promise<void>;
      /**
       * ### Scan for clients
       *
       * > Scans for available clients from the Plex server(s), local network, and plex.tv.
       */
      scan_for_clients: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: recorder
    recorder: {
      /**
       * ### Disable
       *
       * > Stops the recording of events and state changes.
       */
      disable: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Enable
       *
       * > Starts the recording of events and state changes.
       */
      enable: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Get statistics
       *
       * > Retrieves statistics data for entities within a specific time period.
       */
      get_statistics: <T = unknown>(service_data?: {
        /**
         * ## End time
         *
         * > The end time for the statistics query. If omitted, returns all statistics from start time onward.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "end_time": "2025-01-02 00:00:00"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > datetime: null
         * > ```
         */
        end_time?: unknown;
        /**
         * ## Period
         *
         * > The time period to group statistics by.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "period": "hour"
         * > }
         * > ```
         */
        period: "5minute" | "hour" | "day" | "week" | "month";
        /**
         * ## Start time
         *
         * > The start time for the statistics query.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "start_time": "2025-01-01 00:00:00"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > datetime: null
         * > ```
         */
        start_time: unknown;
        /**
         * ## Statistic IDs
         *
         * > The entity IDs or statistic IDs to return statistics for.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "statistic_ids": "sensor.energy_consumption,sensor.temperature"
         * > }
         * > ```
         */
        statistic_ids: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Types
         *
         * > The types of statistics values to return.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "types": "mean,sum"
         * > }
         * > ```
         */
        types: ("change" | "last_reset" | "max" | "mean" | "min" | "state" | "sum")[];
        /**
         * ## Units
         *
         * > Optional unit conversion mapping.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "units": "[object Object]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        units?: unknown;
      }) => Promise<T>;
      /**
       * ### Purge
       *
       * > Starts purge task - to clean up old data from your database.
       */
      purge: (service_data?: {
        /**
         * ## Apply filter
         *
         * > Apply `entity_id` and `event_type` filters in addition to time-based purge.
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        apply_filter?: boolean;
        /**
         * ## Days to keep
         *
         * > Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   max: 365
         * >   unit_of_measurement: days
         * > ```
         */
        keep_days?: number;
        /**
         * ## Repack
         *
         * > Attempt to save disk space by rewriting the entire database file.
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        repack?: boolean;
      }) => Promise<void>;
      /**
       * ### Purge entities
       *
       * > Starts a purge task to remove the data related to specific entities from your database.
       */
      purge_entities: (service_data?: {
        /**
         * ## Domains to remove
         *
         * > List of domains for which the data needs to be removed from the Recorder database.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "domains": "sun"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        domains?: unknown;
        /**
         * ## Entity globs to remove
         *
         * > List of glob patterns used to select the entities for which the data is to be removed from the Recorder database.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_globs": "domain*.object_id*"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        entity_globs?: unknown;
        /**
         * ## Entities to remove
         *
         * > List of entities for which the data is to be removed from the Recorder database.
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Days to keep
         *
         * > Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.
         *
         * ### Default
         *
         * > ```json
         * > 0
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   max: 365
         * >   unit_of_measurement: days
         * > ```
         */
        keep_days?: number;
      }) => Promise<void>;
    };
    // # MARK: remote
    remote: {
      /**
       * ### Delete command
       *
       * > Deletes a command or a list of commands from the database.
       */
      delete_command: (
        service_data?: {
          /**
           * ## Command
           *
           * > The single command or the list of commands to be deleted.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "command": "Mute"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          command: unknown;
          /**
           * ## Device
           *
           * > Device from which commands will be deleted.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "device": "television"
           * > }
           * > ```
           */
          device?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - remote
           * > ```
           */
          entity_id: PICK_ENTITY<"remote"> | PICK_ENTITY<"remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Learn command
       *
       * > Learns a command or a list of commands from a device.
       */
      learn_command: (
        service_data?: {
          /**
           * ## Alternative
           *
           * > If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won't change the state.
           */
          alternative?: boolean;
          /**
           * ## Command
           *
           * > A single command or a list of commands to learn.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "command": "Turn on"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          command?: unknown;
          /**
           * ## Command type
           *
           * > The type of command to be learned.
           *
           * ### Default
           *
           * > ```json
           * > "ir"
           * > ```
           */
          command_type?: "ir" | "rf";
          /**
           * ## Device
           *
           * > Device ID to learn command from.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "device": "television"
           * > }
           * > ```
           */
          device?: string;
          /**
           * ## Timeout
           *
           * > Timeout for the command to be learned.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 60
           * >   step: 5
           * >   unit_of_measurement: seconds
           * > ```
           */
          timeout?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - remote
           * > ```
           */
          entity_id: PICK_ENTITY<"remote"> | PICK_ENTITY<"remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Send command
       *
       * > Sends a command or a list of commands to a device.
       */
      send_command: (
        service_data?: {
          /**
           * ## Command
           *
           * > A single command or a list of commands to send.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "command": "Play"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          command: unknown;
          /**
           * ## Delay seconds
           *
           * > The time you want to wait in between repeated commands.
           *
           * ### Default
           *
           * > ```json
           * > 0.4
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 60
           * >   step: 0.1
           * >   unit_of_measurement: seconds
           * > ```
           */
          delay_secs?: number;
          /**
           * ## Device
           *
           * > Device ID to send command to.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "device": "32756745"
           * > }
           * > ```
           */
          device?: string;
          /**
           * ## Hold seconds
           *
           * > The time you want to have it held before the release is send.
           *
           * ### Default
           *
           * > ```json
           * > 0
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 60
           * >   step: 0.1
           * >   unit_of_measurement: seconds
           * > ```
           */
          hold_secs?: number;
          /**
           * ## Repeats
           *
           * > The number of times you want to repeat the commands.
           *
           * ### Default
           *
           * > ```json
           * > 1
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 255
           * > ```
           */
          num_repeats?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - remote
           * > ```
           */
          entity_id: PICK_ENTITY<"remote"> | PICK_ENTITY<"remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Sends the toggle command.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - remote
           * > ```
           */
          entity_id: PICK_ENTITY<"remote"> | PICK_ENTITY<"remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Sends the turn off command.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - remote
           * > ```
           */
          entity_id: PICK_ENTITY<"remote"> | PICK_ENTITY<"remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Sends the turn on command.
       */
      turn_on: (
        service_data?: {
          /**
           * ## Activity
           *
           * > Activity ID or activity name to be started.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "activity": "BedroomTV"
           * > }
           * > ```
           */
          activity?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - remote
           * > ```
           */
          entity_id: PICK_ENTITY<"remote"> | PICK_ENTITY<"remote">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: rest
    rest: {
      /**
       * ### Reload
       *
       * > Reloads REST entities from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: scene
    scene: {
      /**
       * ### Apply
       *
       * > Activates a scene with configuration.
       */
      apply: (service_data?: {
        /**
         * ## Entities state
         *
         * > List of entities and their target state.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entities": "light.kitchen: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 80\n"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        entities: unknown;
        /**
         * ## Transition
         *
         * > Time it takes the devices to transition into the states defined in the scene.
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   max: 300
         * >   unit_of_measurement: seconds
         * > ```
         */
        transition?: number;
      }) => Promise<void>;
      /**
       * ### Create
       *
       * > Creates a new scene.
       */
      create: (service_data?: {
        /**
         * ## Entity states
         *
         * > List of entities and their target state. If your entities are already in the target state right now, use 'Entities snapshot' instead.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entities": "light.tv_back_light: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 200\n"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        entities?: unknown;
        /**
         * ## Scene entity ID
         *
         * > The entity ID of the new scene.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "scene_id": "all_lights"
         * > }
         * > ```
         */
        scene_id: string;
        /**
         * ## Entities snapshot
         *
         * > List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine 'Entities snapshot' with 'Entity states'.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "snapshot_entities": "- light.ceiling\n- light.kitchen\n"
         * > }
         * > ```
         */
        snapshot_entities?: PICK_ENTITY | PICK_ENTITY[];
      }) => Promise<void>;
      /**
       * ### Delete
       *
       * > Deletes a dynamically created scene.
       */
      delete: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - integration: homeassistant
           * >     domain:
           * >       - scene
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reload
       *
       * > Reloads the scenes from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Activate
       *
       * > Activates a scene.
       */
      turn_on: (
        service_data?: {
          /**
           * ## Transition
           *
           * > Time it takes the devices to transition into the states defined in the scene.
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 300
           * >   unit_of_measurement: seconds
           * > ```
           */
          transition?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - scene
           * > ```
           */
          entity_id: PICK_ENTITY<"scene"> | PICK_ENTITY<"scene">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: schedule
    schedule: {
      /**
       * ### Get schedule
       *
       * > Retrieves the configured time ranges of one or multiple schedules.
       */
      get_schedule: <T = unknown>(
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - schedule
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
      /**
       * ### Reload
       *
       * > Reloads schedules from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: scheduler
    scheduler: {
      /**
       * ### Add
       *
       * > Create a new schedule entity
       */
      add: (service_data?: {
        /**
         * ## End date
         *
         * > Date until which schedule should be executed
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "end_date": "[\"2021-12-31\"]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        end_date?: unknown;
        /**
         * ## Name
         *
         * > Friendly name for the schedule
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "My schedule"
         * > }
         * > ```
         */
        name?: string;
        /**
         * ## Repeat Type
         *
         * > Control what happens after the schedule is triggered
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "repeat_type": "\"repeat\""
         * > }
         * > ```
         */
        repeat_type: "repeat" | "single" | "pause";
        /**
         * ## Start date
         *
         * > Date from which schedule should be executed
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "start_date": "[\"2021-01-01\"]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        start_date?: unknown;
        /**
         * ## Timeslots
         *
         * > list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots)
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "timeslots": "[{start: \"12:00\", stop: \"13:00\", actions: [{service: \"light.turn_on\", entity_id: \"light.my_lamp\", service_data: {brightness: 200}}]}]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        timeslots: unknown;
        /**
         * ## Weekdays
         *
         * > Days of the week for which the schedule should be repeated
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "weekdays": "[\"daily\"]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        weekdays?: unknown;
      }) => Promise<void>;
      /**
       * ### Copy
       *
       * > Duplicate a schedule entity
       */
      copy: (service_data?: {
        /**
         * ## Entity
         *
         * > Identifier of the scheduler entity.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "switch.schedule_abcdef"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: scheduler
         * >   domain: switch
         * > ```
         */
        entity_id:
          | PICK_FROM_PLATFORM<"scheduler", "switch">
          | PICK_FROM_PLATFORM<"scheduler", "switch">[];
        /**
         * ## Name
         *
         * > Friendly name for the copied schedule
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "My schedule"
         * > }
         * > ```
         */
        name?: string;
      }) => Promise<void>;
      /**
       * ### Disable All
       *
       * > Disables all schedules
       */
      disable_all: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Edit
       *
       * > Edit a schedule entity
       */
      edit: (service_data?: {
        /**
         * ## End date
         *
         * > Date until which schedule should be executed
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "end_date": "[\"2021-12-31\"]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        end_date?: unknown;
        /**
         * ## Entity
         *
         * > Identifier of the scheduler entity.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "switch.schedule_abcdef"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: scheduler
         * >   domain: switch
         * > ```
         */
        entity_id:
          | PICK_FROM_PLATFORM<"scheduler", "switch">
          | PICK_FROM_PLATFORM<"scheduler", "switch">[];
        /**
         * ## Name
         *
         * > Friendly name for the schedule
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "name": "My schedule"
         * > }
         * > ```
         */
        name?: string;
        /**
         * ## Repeat Type
         *
         * > Control what happens after the schedule is triggered
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "repeat_type": "\"repeat\""
         * > }
         * > ```
         */
        repeat_type?: "repeat" | "single" | "pause";
        /**
         * ## Start date
         *
         * > Date from which schedule should be executed
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "start_date": "[\"2021-01-01\"]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        start_date?: unknown;
        /**
         * ## Timeslots
         *
         * > list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots)
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "timeslots": "[{start: \"12:00\", stop: \"13:00\", actions: [{service: \"light.turn_on\", entity_id: \"light.my_lamp\", service_data: {brightness: 200}}]}]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        timeslots?: unknown;
        /**
         * ## Weekdays
         *
         * > Days of the week for which the schedule should be repeated
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "weekdays": "[\"daily\"]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        weekdays?: unknown;
      }) => Promise<void>;
      /**
       * ### Enable All
       *
       * > Enables all schedules
       */
      enable_all: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Remove
       *
       * > Remove a schedule entity
       */
      remove: (service_data: {
        /**
         * ## Entity
         *
         * > Identifier of the scheduler entity.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "switch.schedule_abcdef"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: scheduler
         * >   domain: switch
         * > ```
         */
        entity_id:
          | PICK_FROM_PLATFORM<"scheduler", "switch">
          | PICK_FROM_PLATFORM<"scheduler", "switch">[];
      }) => Promise<void>;
      /**
       * ### Run Action
       *
       * > Execute the action of a schedule, optionally at a given time.
       */
      run_action: (service_data?: {
        /**
         * ## Entity
         *
         * > Identifier of the scheduler entity.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "switch.schedule_abcdef"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: scheduler
         * >   domain: switch
         * > ```
         */
        entity_id:
          | PICK_FROM_PLATFORM<"scheduler", "switch">
          | PICK_FROM_PLATFORM<"scheduler", "switch">[];
        /**
         * ## Skip Conditions
         *
         * > Whether the conditions of the schedule should be skipped or not
         */
        skip_conditions?: boolean;
        /**
         * ## Time
         *
         * > Time for which to evaluate the action (only useful for schedules with multiple timeslot)
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "time": "\"12:00\""
         * > }
         * > ```
         */
        time?: string;
      }) => Promise<void>;
    };
    // # MARK: script
    script: {
      /**
       * ### Play Xbox Script
       *
       * >
       */
      play_xbox_script: <T = unknown>(service_data: EmptyObject) => Promise<T>;
      /**
       * ### Reload
       *
       * > Reloads all the available scripts.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Toggle
       *
       * > Starts a script if it isn't running, stops it otherwise.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - script
           * > ```
           */
          entity_id: PICK_ENTITY<"script"> | PICK_ENTITY<"script">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Stops a running script.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - script
           * > ```
           */
          entity_id: PICK_ENTITY<"script"> | PICK_ENTITY<"script">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Runs the sequence of actions defined in a script.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - script
           * > ```
           */
          entity_id: PICK_ENTITY<"script"> | PICK_ENTITY<"script">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: select
    select: {
      /**
       * ### First
       *
       * > Selects the first option.
       */
      select_first: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - select
           * > ```
           */
          entity_id: PICK_ENTITY<"select"> | PICK_ENTITY<"select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Last
       *
       * > Selects the last option.
       */
      select_last: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - select
           * > ```
           */
          entity_id: PICK_ENTITY<"select"> | PICK_ENTITY<"select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Next
       *
       * > Selects the next option.
       */
      select_next: (
        service_data?: {
          /**
           * ## Cycle
           *
           * > If the option should cycle from the last to the first.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          cycle?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - select
           * > ```
           */
          entity_id: PICK_ENTITY<"select"> | PICK_ENTITY<"select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Select
       *
       * > Selects an option.
       */
      select_option: (
        service_data: {
          /**
           * ## Option
           *
           * > Option to be selected.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "option": "\"Item A\""
           * > }
           * > ```
           */
          option: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - select
           * > ```
           */
          entity_id: PICK_ENTITY<"select"> | PICK_ENTITY<"select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Previous
       *
       * > Selects the previous option.
       */
      select_previous: (
        service_data?: {
          /**
           * ## Cycle
           *
           * > If the option should cycle from the first to the last.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          cycle?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - select
           * > ```
           */
          entity_id: PICK_ENTITY<"select"> | PICK_ENTITY<"select">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: siren
    siren: {
      /**
       * ### Toggle
       *
       * > Toggles the siren on/off.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - siren
           * >     supported_features:
           * >       - 3
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns the siren off.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - siren
           * >     supported_features:
           * >       - 2
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns the siren on.
       */
      turn_on: (
        service_data?: {
          /**
           * ## Duration
           *
           * > Number of seconds the sound is played. Must be supported by the integration.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "duration": "15"
           * > }
           * > ```
           */
          duration?: string;
          /**
           * ## Tone
           *
           * > The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "tone": "fire"
           * > }
           * > ```
           */
          tone?: string;
          /**
           * ## Volume
           *
           * > The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "volume_level": "0.5"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 1
           * >   step: 0.05
           * > ```
           */
          volume_level?: number;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - siren
           * >     supported_features:
           * >       - 1
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: statistics
    statistics: {
      /**
       * ### Reload
       *
       * > Reloads statistics sensors from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: subaru
    subaru: {
      /**
       * ### Unlock specific door
       *
       * > Unlocks specific door(s).
       */
      unlock_specific_door: (
        service_data: {
          /**
           * ## Door
           *
           * > Which door(s) to open.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "door": "driver"
           * > }
           * > ```
           */
          door: "all" | "driver" | "tailgate";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - lock
           * >     integration: subaru
           * > ```
           */
          entity_id: PICK_FROM_PLATFORM<"subaru", "lock"> | PICK_FROM_PLATFORM<"subaru", "lock">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: switch
    switch: {
      /**
       * ### Toggle
       *
       * > Toggles a switch on/off.
       */
      toggle: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - switch
           * > ```
           */
          entity_id: PICK_ENTITY<"switch"> | PICK_ENTITY<"switch">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn off
       *
       * > Turns a switch off.
       */
      turn_off: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - switch
           * > ```
           */
          entity_id: PICK_ENTITY<"switch"> | PICK_ENTITY<"switch">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Turn on
       *
       * > Turns a switch on.
       */
      turn_on: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - switch
           * > ```
           */
          entity_id: PICK_ENTITY<"switch"> | PICK_ENTITY<"switch">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: system_log
    system_log: {
      /**
       * ### Clear
       *
       * > Deletes all log entries.
       */
      clear: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Write
       *
       * > Write log entry.
       */
      write: (service_data?: {
        /**
         * ## Level
         *
         * > Log level.
         *
         * ### Default
         *
         * > ```json
         * > "error"
         * > ```
         */
        level?: "debug" | "info" | "warning" | "error" | "critical";
        /**
         * ## Logger
         *
         * > Logger name under which to log the message. Defaults to `system_log.external`.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "logger": "mycomponent.myplatform"
         * > }
         * > ```
         */
        logger?: string;
        /**
         * ## Message
         *
         * > Message to log.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "Something went wrong"
         * > }
         * > ```
         */
        message: string;
      }) => Promise<void>;
    };
    // # MARK: teamtracker
    teamtracker: {
      /**
       * ### Teamtracker Call API
       *
       * > Sets the teamtracker sensor based on the input parameters, calls the ESPN API, and populates the sensor attributes.
       */
      call_api: (
        service_data?: {
          /**
           * ## Conference
           *
           * > Conference ID (only for NCAA)
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "conference_id": "5"
           * > }
           * > ```
           */
          conference_id?: string;
          /**
           * ## League
           *
           * > League path
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "league_path": "nfl"
           * > }
           * > ```
           */
          league_path: string;
          /**
           * ## Sport
           *
           * > Sport path
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "sport_path": "football"
           * > }
           * > ```
           */
          sport_path: string;
          /**
           * ## Team
           *
           * > Team ID
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "team_id": "CLE"
           * > }
           * > ```
           */
          team_id: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - sensor
           * >     integration: teamtracker
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"teamtracker", "sensor">
            | PICK_FROM_PLATFORM<"teamtracker", "sensor">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: template
    template: {
      /**
       * ### Reload
       *
       * > Reloads template entities from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: text
    text: {
      /**
       * ### Set value
       *
       * > Sets the value.
       */
      set_value: (
        service_data: {
          /**
           * ## Value
           *
           * > Enter your text.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "value": "Hello world!"
           * > }
           * > ```
           */
          value: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - text
           * > ```
           */
          entity_id: PICK_ENTITY<"text"> | PICK_ENTITY<"text">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: thermal_comfort
    thermal_comfort: {
      /**
       * ### Reload
       *
       * > Reload all Thermal Comfort entities.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: time
    time: {
      /**
       * ### Set Time
       *
       * > Sets the time.
       */
      set_value: (
        service_data: {
          /**
           * ## Time
           *
           * > The time to set.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "time": "22:15"
           * > }
           * > ```
           */
          time: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - time
           * > ```
           */
          entity_id: PICK_ENTITY<"time"> | PICK_ENTITY<"time">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: timer
    timer: {
      /**
       * ### Cancel
       *
       * > Resets a timer's duration to the last known initial value without firing the timer finished event.
       */
      cancel: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - timer
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Change
       *
       * > Changes a timer by adding or subtracting a given duration.
       */
      change: (
        service_data: {
          /**
           * ## Duration
           *
           * > Duration to add to or subtract from the running timer.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "duration": "00:01:00, 60 or -60"
           * > }
           * > ```
           *
           * ### Default
           *
           * > ```json
           * > 0
           * > ```
           */
          duration: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - timer
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Finish
       *
       * > Finishes a running timer earlier than scheduled.
       */
      finish: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - timer
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Pause
       *
       * > Pauses a running timer, retaining the remaining duration for later continuation.
       */
      pause: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - timer
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reload
       *
       * > Reloads timers from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Start
       *
       * > Starts a timer or restarts it with a provided duration.
       */
      start: (
        service_data?: {
          /**
           * ## Duration
           *
           * > Custom duration to restart the timer with.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "duration": "00:01:00 or 60"
           * > }
           * > ```
           */
          duration?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - timer
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: tts
    tts: {
      /**
       * ### Clear TTS cache
       *
       * > Removes all cached text-to-speech files and purges the memory.
       */
      clear_cache: (service_data: EmptyObject) => Promise<void>;
      /**
       * ### Say a TTS message with cloud
       *
       * > Say something using text-to-speech on a media player with cloud.
       */
      cloud_say: (service_data?: {
        /**
         * ## cache
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        cache?: boolean;
        /**
         * ## entity_id
         */
        entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
        /**
         * ## language
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "language": "ru"
         * > }
         * > ```
         */
        language?: string;
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "My name is hanna"
         * > }
         * > ```
         */
        message: string;
        /**
         * ## options
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "options": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        options?: unknown;
      }) => Promise<void>;
      /**
       * ### Say a TTS message with google_translate
       *
       * > Say something using text-to-speech on a media player with google_translate.
       */
      google_translate_say: (service_data?: {
        /**
         * ## cache
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        cache?: boolean;
        /**
         * ## entity_id
         */
        entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
        /**
         * ## language
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "language": "ru"
         * > }
         * > ```
         */
        language?: string;
        /**
         * ## message
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "My name is hanna"
         * > }
         * > ```
         */
        message: string;
        /**
         * ## options
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "options": "platform specific"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        options?: unknown;
      }) => Promise<void>;
      /**
       * ### Speak
       *
       * > Speaks something using text-to-speech on a media player.
       */
      speak: (
        service_data?: {
          /**
           * ## Cache
           *
           * > Stores this message locally so that when the text is requested again, the output can be produced more quickly.
           *
           * ### Default
           *
           * > ```json
           * > true
           * > ```
           */
          cache?: boolean;
          /**
           * ## Language
           *
           * > Language to use for speech generation.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "language": "ru"
           * > }
           * > ```
           */
          language?: string;
          /**
           * ## Media player entity
           *
           * > Media players to play the message.
           */
          media_player_entity_id: PICK_ENTITY<"media_player"> | PICK_ENTITY<"media_player">[];
          /**
           * ## Message
           *
           * > The text you want to convert into speech so that you can listen to it on your device.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "message": "My name is hanna"
           * > }
           * > ```
           */
          message: string;
          /**
           * ## Options
           *
           * > A dictionary containing integration-specific options.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "options": "platform specific"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          options?: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - tts
           * > ```
           */
          entity_id: PICK_ENTITY<"tts"> | PICK_ENTITY<"tts">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: unifi
    unifi: {
      /**
       * ### Reconnect wireless client
       *
       * > Tries to get wireless client to reconnect to UniFi Network.
       */
      reconnect_client: (service_data: {
        /**
         * ## Device
         *
         * > The device that should be forced to reconnect to the wireless network.
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   integration: unifi
         * > ```
         */
        device_id: unknown;
      }) => Promise<void>;
      /**
       * ### Remove clients from the UniFi Network
       *
       * > Cleans up clients that have only been associated with the controller for a short period of time.
       */
      remove_clients: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: unifiprotect
    unifiprotect: {
      /**
       * ### Add doorbell text
       *
       * > Adds a new custom message for doorbells.
       */
      add_doorbell_text: (service_data: {
        /**
         * ## UniFi Protect NVR
         *
         * > Any device from the UniFi Protect instance you want to change. In case you have multiple Protect instances.
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   integration: unifiprotect
         * > ```
         */
        device_id: unknown;
        /**
         * ## Custom message
         *
         * > New custom message to add. Must be less than 30 characters.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "Come In"
         * > }
         * > ```
         */
        message: string;
      }) => Promise<void>;
      /**
       * ### Get user keyring info
       *
       * > Fetches a detailed list of users with NFC and fingerprint associations for automations.
       */
      get_user_keyring_info: <T = unknown>(service_data: {
        /**
         * ## UniFi Protect NVR
         *
         * > Any device from the UniFi Protect instance you want to retrieve keyring details. This is useful for systems with multiple Protect instances.
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   integration: unifiprotect
         * > ```
         */
        device_id: unknown;
      }) => Promise<T>;
      /**
       * ### Remove doorbell text
       *
       * > Removes an existing custom message for doorbells.
       */
      remove_doorbell_text: (service_data: {
        /**
         * ## UniFi Protect NVR
         *
         * > Any device from the UniFi Protect instance you want to change. In case you have multiple Protect instances.
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   integration: unifiprotect
         * > ```
         */
        device_id: unknown;
        /**
         * ## Custom message
         *
         * > Existing custom message to remove.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "message": "Go Away!"
         * > }
         * > ```
         */
        message: string;
      }) => Promise<void>;
      /**
       * ### Remove privacy zone
       *
       * > Removes a privacy zone from a camera.
       */
      remove_privacy_zone: (service_data: {
        /**
         * ## Camera
         *
         * > Camera you want to remove the privacy zone from.
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   integration: unifiprotect
         * >   entity:
         * >     domain: camera
         * > ```
         */
        device_id: unknown;
        /**
         * ## Privacy zone
         *
         * > The name of the zone to remove.
         */
        name: string;
      }) => Promise<void>;
      /**
       * ### Set chime paired doorbells
       *
       * > Pairs doorbell(s) with a smart chime.
       */
      set_chime_paired_doorbells: (service_data?: {
        /**
         * ## Chime
         *
         * > The chimes to link to the doorbells.
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   integration: unifiprotect
         * >   entity:
         * >     device_class: unifiprotect__chime_button
         * > ```
         */
        device_id: unknown;
        /**
         * ## Doorbells
         *
         * > The doorbells to link to the chime.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "doorbells": "binary_sensor.front_doorbell_doorbell"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > target:
         * >   entity:
         * >     integration: unifiprotect
         * >     domain: binary_sensor
         * >     device_class: occupancy
         * > ```
         */
        doorbells?: unknown;
      }) => Promise<void>;
    };
    // # MARK: update
    update: {
      /**
       * ### Clear skipped update
       *
       * > Removes the skipped version marker from an update.
       */
      clear_skipped: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - update
           * > ```
           */
          entity_id: PICK_ENTITY<"update"> | PICK_ENTITY<"update">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Install update
       *
       * > Installs an update for a device or service.
       */
      install: (
        service_data?: {
          /**
           * ## Backup
           *
           * > If supported by the integration, this creates a backup before starting the update.
           */
          backup?: boolean;
          /**
           * ## Version
           *
           * > The version to install. If omitted, the latest version will be installed.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "version": "1.0.0"
           * > }
           * > ```
           */
          version?: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - update
           * > ```
           */
          entity_id: PICK_ENTITY<"update"> | PICK_ENTITY<"update">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Skip update
       *
       * > Marks currently available update as skipped.
       */
      skip: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - update
           * > ```
           */
          entity_id: PICK_ENTITY<"update"> | PICK_ENTITY<"update">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: utility_meter
    utility_meter: {
      /**
       * ### Calibrate
       *
       * > Calibrates a utility meter sensor.
       */
      calibrate: (
        service_data: {
          /**
           * ## Value
           *
           * > Value to which set the meter.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "value": "100"
           * > }
           * > ```
           */
          value: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - sensor
           * >     integration: utility_meter
           * > ```
           */
          entity_id:
            | PICK_FROM_PLATFORM<"utility_meter", "sensor">
            | PICK_FROM_PLATFORM<"utility_meter", "sensor">[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Reset
       *
       * > Resets all counters of a utility meter.
       */
      reset: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - select
           * >     integration: utility_meter
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: vacuum
    vacuum: {
      /**
       * ### Clean spot
       *
       * > Tells the vacuum cleaner to do a spot clean-up.
       */
      clean_spot: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Locate
       *
       * > Locates the vacuum cleaner robot.
       */
      locate: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * >     supported_features:
           * >       - 512
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Pause
       *
       * > Pauses the cleaning task.
       */
      pause: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * >     supported_features:
           * >       - 4
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Return to dock
       *
       * > Tells the vacuum cleaner to return to its dock.
       */
      return_to_base: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * >     supported_features:
           * >       - 16
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Send command
       *
       * > Sends a command to the vacuum cleaner.
       */
      send_command: (
        service_data?: {
          /**
           * ## Command
           *
           * > Command to execute. The commands are integration-specific.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "command": "set_dnd_timer"
           * > }
           * > ```
           */
          command: string;
          /**
           * ## Parameters
           *
           * > Parameters for the command. The parameters are integration-specific.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "params": "{ \"key\": \"value\" }"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > object: null
           * > ```
           */
          params?: unknown;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set fan speed
       *
       * > Sets the fan speed of the vacuum cleaner.
       */
      set_fan_speed: (
        service_data: {
          /**
           * ## Fan speed
           *
           * > Fan speed. The value depends on the integration. Some integrations have speed steps, like 'medium'. Some use a percentage, between 0 and 100.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "fan_speed": "low"
           * > }
           * > ```
           */
          fan_speed: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Start
       *
       * > Starts or resumes the cleaning task.
       */
      start: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * >     supported_features:
           * >       - 8192
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Stop
       *
       * > Stops the current cleaning task.
       */
      stop: (
        service_data: RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - vacuum
           * >     supported_features:
           * >       - 8
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
    };
    // # MARK: weather
    weather: {
      /**
       * ### Get forecasts
       *
       * > Retrieves the forecast from selected weather services.
       */
      get_forecasts: <
        ENTITIES extends PICK_ENTITY<"weather">,
        T = Record<
          ENTITIES,
          {
            forecast: WeatherGetForecasts[];
          }
        >,
      >(
        service_data: {
          /**
           * ## Forecast type
           *
           * > The scope of the weather forecast.
           */
          type: "daily" | "hourly" | "twice_daily";
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - weather
           * >     supported_features:
           * >       - 1
           * >       - 2
           * >       - 4
           * > ```
           */
          entity_id: ENTITIES | ENTITIES[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<T>;
    };
    // # MARK: webrtc
    webrtc: {
      /**
       * ### Create Link
       *
       * > Create a temporary or permanent link to a stream (enter `url` or `entity`)
       */
      create_link: (service_data?: {
        /**
         * ## Entity
         *
         * > Camera entity_id
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity": "camera.generic_stream"
         * > }
         * > ```
         */
        entity?: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
        /**
         * ## Link ID
         *
         * > Create a random or permanent ID for your link
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "link_id": "fd0a53ca-e9ab-4e7a-86a2-441642b16ae1"
         * > }
         * > ```
         */
        link_id: string;
        /**
         * ## Open limit
         *
         * > How many times a link can be opened (0 - unlimit)
         *
         * ### Default
         *
         * > ```json
         * > 1
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   max: 100
         * >   unit_of_measurement: times
         * > ```
         */
        open_limit?: number;
        /**
         * ## Time to live
         *
         * > How many seconds will the link live (0 - unlimit)
         *
         * ### Default
         *
         * > ```json
         * > 60
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   max: 100000
         * >   unit_of_measurement: seconds
         * > ```
         */
        time_to_live?: number;
        /**
         * ## URL
         *
         * > Link to RTSP-stream
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "url": "rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0"
         * > }
         * > ```
         */
        url?: string;
      }) => Promise<void>;
      /**
       * ### DashCast
       *
       * > Cast stream to Chromecast device via DashCast application
       */
      dash_cast: (service_data?: {
        /**
         * ## Entity
         *
         * > Camera entity_id
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity": "camera.generic_stream"
         * > }
         * > ```
         */
        entity?: PICK_ENTITY<"camera"> | PICK_ENTITY<"camera">[];
        /**
         * ## Media Entity
         *
         * > Media player entity_id
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "media_player.mibox4"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: cast
         * >   domain: media_player
         * > ```
         */
        entity_id:
          | PICK_FROM_PLATFORM<"cast", "media_player">
          | PICK_FROM_PLATFORM<"cast", "media_player">[];
        /**
         * ## Extra
         *
         * > Additional card params
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        extra?: unknown;
        /**
         * ## Force
         *
         * > Force restart DashCast application
         */
        force?: boolean;
        /**
         * ## Hass URL
         *
         * > Manual base URL to Hass server
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "hass_url": "http://192.168.1.123:8123"
         * > }
         * > ```
         */
        hass_url?: string;
        /**
         * ## URL
         *
         * > Link to RTSP-stream
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "url": "rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0"
         * > }
         * > ```
         */
        url?: string;
      }) => Promise<void>;
    };
    // # MARK: zone
    zone: {
      /**
       * ### Reload
       *
       * > Reloads zones from the YAML-configuration.
       */
      reload: (service_data: EmptyObject) => Promise<void>;
    };
    // # MARK: zwave_js
    zwave_js: {
      /**
       * ### Bulk set partial configuration parameters (advanced)
       *
       * > Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.
       */
      bulk_set_partial_config_parameters: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   device:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Endpoint
         *
         * > The configuration parameter's endpoint.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "endpoint": "1"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > 0
         * > ```
         */
        endpoint?: string;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Parameter
         *
         * > The name (or ID) of the configuration parameter you want to configure.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "parameter": "9"
         * > }
         * > ```
         */
        parameter: string;
        /**
         * ## Value
         *
         * > The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "value": "\"0x1\": 1\n\"0x10\": 1\n\"0x20\": 1\n\"0x40\": 1\n"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        value: unknown;
      }) => Promise<void>;
      /**
       * ### Clear lock user code
       *
       * > Clears a user code from a lock.
       */
      clear_lock_usercode: (
        service_data: {
          /**
           * ## Code slot
           *
           * > Code slot to clear code from.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "code_slot": "1"
           * > }
           * > ```
           */
          code_slot: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - lock
           * >     integration: zwave_js
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Invoke a Command Class API on a node (advanced)
       *
       * > Calls a Command Class API on a node. Some Command Classes can't be fully controlled via the `set_value` action and require direct calls to the Command Class API.
       */
      invoke_cc_api: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   device:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Command class
         *
         * > The ID of the command class that you want to issue a command to.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "command_class": "132"
         * > }
         * > ```
         */
        command_class: string;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Endpoint
         *
         * > The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "endpoint": "1"
         * > }
         * > ```
         */
        endpoint?: string;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Method name
         *
         * > The name of the API method to call. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "method_name": "setInterval"
         * > }
         * > ```
         */
        method_name: string;
        /**
         * ## Parameters
         *
         * > A list of parameters to pass to the API method. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "parameters": "[1, 1]"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        parameters: unknown;
      }) => Promise<void>;
      /**
       * ### Set a value on multiple devices via multicast (advanced)
       *
       * > Changes any value that Z-Wave recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This action has minimal validation so only use this action if you know what you are doing.
       */
      multicast_set_value: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   device:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Broadcast
         *
         * > Whether the command should be broadcast to all devices on the network.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "broadcast": "true"
         * > }
         * > ```
         */
        broadcast?: boolean;
        /**
         * ## Command class
         *
         * > The ID of the command class for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "command_class": "117"
         * > }
         * > ```
         */
        command_class: string;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Endpoint
         *
         * > The endpoint for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "endpoint": "1"
         * > }
         * > ```
         */
        endpoint?: string;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Options
         *
         * > Set value options map. Refer to the Z-Wave documentation for more information on what options can be set.
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        options?: unknown;
        /**
         * ## Property
         *
         * > The ID of the property for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "property": "currentValue"
         * > }
         * > ```
         */
        property: string;
        /**
         * ## Property key
         *
         * > The ID of the property key for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "property_key": "1"
         * > }
         * > ```
         */
        property_key?: string;
        /**
         * ## Value
         *
         * > The new value to set.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "value": "ffbb99"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        value: unknown;
      }) => Promise<void>;
      /**
       * ### Ping a node
       *
       * > Forces Z-Wave to try to reach a node. This can be used to update the status of the node in Z-Wave when you think it doesn't accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.
       */
      ping: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   device:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
      }) => Promise<void>;
      /**
       * ### Refresh notifications on a node (advanced)
       *
       * > Refreshes notifications on a node based on notification type and optionally notification event.
       */
      refresh_notifications: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   device:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Notification Event
         *
         * > The Notification Event number as defined in the Z-Wave specs.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "notification_event": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 1
         * >   max: 255
         * >   mode: box
         * > ```
         */
        notification_event?: number;
        /**
         * ## Notification Type
         *
         * > The Notification Type number as defined in the Z-Wave specs.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "notification_type": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 1
         * >   max: 22
         * >   mode: box
         * > ```
         */
        notification_type: number;
      }) => Promise<void>;
      /**
       * ### Refresh values
       *
       * > Force updates the values of a Z-Wave entity.
       */
      refresh_value: (service_data?: {
        /**
         * ## Entities
         *
         * > Entities to refresh.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "- sensor.family_room_motion\n- switch.kitchen\n"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id: PICK_FROM_PLATFORM<"zwave_js"> | PICK_FROM_PLATFORM<"zwave_js">[];
        /**
         * ## Refresh all values
         *
         * > Whether to refresh all values or just the primary value.
         *
         * ### Default
         *
         * > ```json
         * > false
         * > ```
         */
        refresh_all_values?: boolean;
      }) => Promise<void>;
      /**
       * ### Reset meters on a node
       *
       * > Resets the meters on a node.
       */
      reset_meter: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   entity:
         * >     - integration: zwave_js
         * >       domain: sensor
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   entity:
         * >     - integration: zwave_js
         * >       domain: sensor
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >       domain: sensor
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Meter type
         *
         * > The type of meter to reset. Not all meters support the ability to pick a meter type to reset.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "meter_type": "1"
         * > }
         * > ```
         */
        meter_type?: string;
        /**
         * ## Target value
         *
         * > The value that meters should be reset to. Not all meters support the ability to be reset to a specific value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "value": "5"
         * > }
         * > ```
         */
        value?: string;
      }) => Promise<void>;
      /**
       * ### Set device configuration parameter
       *
       * > Changes the configuration parameters of your Z-Wave devices.
       */
      set_config_parameter: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   device:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Bitmask
         *
         * > Target a specific bitmask (see the documentation for more information). Cannot be combined with 'Value size' or 'Value format'.
         */
        bitmask?: string;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Endpoint
         *
         * > The configuration parameter's endpoint.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "endpoint": "1"
         * > }
         * > ```
         *
         * ### Default
         *
         * > ```json
         * > 0
         * > ```
         */
        endpoint?: string;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Parameter
         *
         * > The name (or ID) of the configuration parameter you want to configure.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "parameter": "Minimum brightness level"
         * > }
         * > ```
         */
        parameter: string;
        /**
         * ## Value
         *
         * > The new value to set for this configuration parameter.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "value": "5"
         * > }
         * > ```
         */
        value: string;
        /**
         * ## Value format
         *
         * > Format of the value, 0 for signed integer, 1 for unsigned integer, 2 for enumerated, 3 for bitfield. Used in combination with 'Value size' when a config parameter is not defined in your device's configuration file. Cannot be combined with 'Bitmask'.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "value_format": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 0
         * >   max: 3
         * > ```
         */
        value_format?: number;
        /**
         * ## Value size
         *
         * > Size of the value, either 1, 2, or 4. Used in combination with 'Value format' when a config parameter is not defined in your device's configuration file. Cannot be combined with 'Bitmask'.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "value_size": "1"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > number:
         * >   min: 1
         * >   max: 4
         * > ```
         */
        value_size?: number;
      }) => Promise<void>;
      /**
       * ### Set lock configuration
       *
       * > Sets the configuration for a lock.
       */
      set_lock_configuration: (
        service_data?: {
          /**
           * ## Auto relock time
           *
           * > Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "auto_relock_time": "1"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 65535
           * >   unit_of_measurement: sec
           * > ```
           */
          auto_relock_time?: number;
          /**
           * ## Block to Block
           *
           * > Whether the lock should run the motor until it hits resistance.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "block_to_block": "true"
           * > }
           * > ```
           */
          block_to_block?: boolean;
          /**
           * ## Hold and release time
           *
           * > Duration in seconds the latch stays retracted.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "hold_and_release_time": "1"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 65535
           * >   unit_of_measurement: sec
           * > ```
           */
          hold_and_release_time?: number;
          /**
           * ## Lock timeout
           *
           * > Seconds until lock mode times out. Should only be used if operation type is `timed`.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "lock_timeout": "1"
           * > }
           * > ```
           *
           * ## Selector
           *
           * > ```yaml
           * > number:
           * >   min: 0
           * >   max: 65535
           * >   unit_of_measurement: sec
           * > ```
           */
          lock_timeout?: number;
          /**
           * ## Operation type
           *
           * > The operation type of the lock.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "operation_type": "timed"
           * > }
           * > ```
           */
          operation_type: "constant" | "timed";
          /**
           * ## Twist Assist
           *
           * > Whether the motor should help in locking and unlocking.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "twist_assist": "true"
           * > }
           * > ```
           */
          twist_assist?: boolean;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - lock
           * >     integration: zwave_js
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set lock user code
       *
       * > Sets a user code on a lock.
       */
      set_lock_usercode: (
        service_data: {
          /**
           * ## Code slot
           *
           * > Code slot to set the code.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "code_slot": "1"
           * > }
           * > ```
           */
          code_slot: string;
          /**
           * ## Code
           *
           * > Lock code to set.
           *
           * ### Example
           *
           * > ```json
           * > {
           * >   "usercode": "1234"
           * > }
           * > ```
           */
          usercode: string;
        } & RequireAtLeastOne<{
          /**
           * Assisted definition
           * > ```yaml
           * > entity:
           * >   - domain:
           * >       - lock
           * >     integration: zwave_js
           * > ```
           */
          entity_id: never | never[];
          device_id: TDeviceId | TDeviceId[];
          label_id: TLabelId | TLabelId[];
          area_id: TAreaId | TAreaId[];
        }>,
      ) => Promise<void>;
      /**
       * ### Set a value (advanced)
       *
       * > Changes any value that Z-Wave recognizes on a Z-Wave device. This action has minimal validation so only use this action if you know what you are doing.
       */
      set_value: (service_data?: {
        /**
         * ## Area ID(s)
         *
         * > The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "area_id": "living_room"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > area:
         * >   device:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        area_id?: unknown;
        /**
         * ## Command class
         *
         * > The ID of the command class for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "command_class": "117"
         * > }
         * > ```
         */
        command_class: string;
        /**
         * ## Device ID(s)
         *
         * > The device(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "device_id": "8f4219cfa57e23f6f669c4616c2205e2"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > device:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        device_id?: unknown;
        /**
         * ## Endpoint
         *
         * > The endpoint for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "endpoint": "1"
         * > }
         * > ```
         */
        endpoint?: string;
        /**
         * ## Entity ID(s)
         *
         * > The entity ID(s) to target for this action.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "entity_id": "sensor.living_room_temperature"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > entity:
         * >   filter:
         * >     - integration: zwave_js
         * >   multiple: true
         * > ```
         */
        entity_id?: PICK_ENTITY | PICK_ENTITY[];
        /**
         * ## Options
         *
         * > Set value options map. Refer to the Z-Wave documentation for more information on what options can be set.
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        options?: unknown;
        /**
         * ## Property
         *
         * > The ID of the property for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "property": "currentValue"
         * > }
         * > ```
         */
        property: string;
        /**
         * ## Property key
         *
         * > The ID of the property key for the value.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "property_key": "1"
         * > }
         * > ```
         */
        property_key?: string;
        /**
         * ## Value
         *
         * > The new value to set.
         *
         * ### Example
         *
         * > ```json
         * > {
         * >   "value": "ffbb99"
         * > }
         * > ```
         *
         * ## Selector
         *
         * > ```yaml
         * > object: null
         * > ```
         */
        value: unknown;
        /**
         * ## Wait for result
         *
         * > Whether to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If enabled, the action can take a while if setting a value on an asleep battery device.
         */
        wait_for_result?: boolean;
      }) => Promise<void>;
    };
  }
}
