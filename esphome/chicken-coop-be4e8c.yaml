esphome:
  name: "chicken-coop-be4e8c"
  friendly_name: Chicken Coop
  min_version: 2024.11.0
  name_add_mac_suffix: false

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set up a wifi access point
  ap:
    ssid: "chicken-coop-be4e8c"
    password: "7h9sQ2jh8CRd"

debug:
  update_interval: 5s

output:
  - platform: gpio
    pin: GPIO2
    id: "motor3"
  - platform: gpio
    pin: GPIO3
    id: "motor4"

switch:
  - platform: output
    output: "motor3"
    id: switch_motor3
  - platform: output
    output: "motor4"
    id: switch_motor4
  - platform: template
    id: auto_open
    name: "Automatic Open"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO5
      mode:
        input: true
        pullup: true
    id: coop_door_top_stop
    filters:
      - invert
  - platform: gpio
    pin:
      number: GPIO4
      mode:
        input: true
        pullup: true
    id: coop_door_bottom_stop
    filters:
      - invert
      - delayed_on: 1s
  - platform: gpio
    pin:
      number: GPIO21
      mode:
        input: true
        pullup: true
    id: coop_door_button
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - lambda: |-
            auto call = id(chicken_coop_door).make_call();
            call.set_command_toggle();
            call.perform();

cover:
  - platform: feedback
    id: chicken_coop_door
    name: Chicken Coop Door
    device_class: garage
    max_duration: 10s
    stop_action:
      - switch.turn_off: switch_motor3
      - switch.turn_off: switch_motor4
    open_action:
      - switch.turn_off: switch_motor4
      - switch.turn_on: switch_motor3
    open_endstop: coop_door_top_stop
    open_duration: 8s
    close_action:
      - switch.turn_off: switch_motor3
      - switch.turn_on: switch_motor4
    close_duration: 8s
    close_endstop: coop_door_bottom_stop

time:
  - platform: homeassistant

number:
  - platform: template
    name: "Open Delay"
    id: open_delay
    min_value: 0
    max_value: 600
    unit_of_measurement: "min"
    mode: box
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 30
    icon: mdi:weather-sunset-up
  - platform: template
    name: "Close Delay"
    id: close_delay
    min_value: 0
    max_value: 600
    unit_of_measurement: "min"
    mode: box
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 15
    icon: mdi:weather-sunset-down


sun:
  latitude: !secret latitude
  longitude: !secret longitude
  on_sunrise:
      - then:
        - if:
            condition:
              lambda: "return id(auto_open).state;"
            then:
              - delay: !lambda 'return id(open_delay).state * 60000;'
              - cover.open: chicken_coop_door
  on_sunset:
    - then:
        - delay: !lambda 'return id(close_delay).state * 60000;'
        - cover.close: chicken_coop_door

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

text_sensor:
  - platform: sun
    name: Next Auto Open
    type: sunrise
    format: "%Y-%m-%d %H:%M:%S"
    entity_category: "diagnostic"
    update_interval: 10min
    filters:
      lambda: |-
        const std::string input_time(x);

        ESPTime parsed_time;
        ESPTime::strptime(input_time, parsed_time);

        parsed_time.recalc_timestamp_local();
        parsed_time = ESPTime::from_epoch_local(parsed_time.timestamp + id(open_delay).state * 60);

        char buffer[64];
        parsed_time.strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S");
        return std::string(buffer);

  - platform: sun
    name: Next Auto Close
    type: sunset
    format: "%Y-%m-%d %H:%M:%S"
    entity_category: "diagnostic"
    update_interval: 10min
    filters:
      lambda: |-
        const std::string input_time(x);

        ESPTime parsed_time;
        ESPTime::strptime(input_time, parsed_time);

        parsed_time.recalc_timestamp_local();
        parsed_time = ESPTime::from_epoch_local(parsed_time.timestamp + id(close_delay).state * 60);

        char buffer[64];
        parsed_time.strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S");
        return std::string(buffer);
  - platform: debug
    device:
      name: "Device Info"
      entity_category: "diagnostic"
    reset_reason:
      name: "Reset Reason"
      entity_category: "diagnostic"
